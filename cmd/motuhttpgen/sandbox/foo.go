// Code generated by motuhttpgen. DO NOT EDIT.

package motu

import (
	"fmt"

	"github.com/jdginn/arpad/devices"
)

type Motu struct {
	d   *HTTPDatastore
	Uid *uid
	Mix *mix
}

func NewMotu(datastore *HTTPDatastore) *Motu {
	return &Motu{
		d: datastore,
		Uid: &uid{
			device: dev,
		},
		Mix: &mix{
			device: dev,
		},
	}
}

func (motu *Motu) Ext(ibank_or_obank int64) *ext {
	return &ext{
		state: extState{
			ibank_or_obank: ibank_or_obank,
		},
		device: motu.device,
		Caps: &extCaps{
			device: motu.device,
			state: extCapsState{
				ibank_or_obank: ibank_or_obank,
			}, Avb: &extCapsAvb{
				device: motu.device,
				state: extCapsAvbState{
					ibank_or_obank: ibank_or_obank,
				}},
			Router: &extCapsRouter{
				device: motu.device,
				state: extCapsRouterState{
					ibank_or_obank: ibank_or_obank,
				}},
			Mixer: &extCapsMixer{
				device: motu.device,
				state: extCapsMixerState{
					ibank_or_obank: ibank_or_obank,
				}},
		},
		ClockLocked: &extClockLocked{
			device: motu.device,
			state: extClockLockedState{
				ibank_or_obank: ibank_or_obank,
			}},
		WordClockMode: &extWordClockMode{
			device: motu.device,
			state: extWordClockModeState{
				ibank_or_obank: ibank_or_obank,
			}},
		WordClockThru: &extWordClockThru{
			device: motu.device,
			state: extWordClockThruState{
				ibank_or_obank: ibank_or_obank,
			}},
		SmuxPerBank: &extSmuxPerBank{
			device: motu.device,
			state: extSmuxPerBankState{
				ibank_or_obank: ibank_or_obank,
			}},
		Vlimit: &extVlimit{
			device: motu.device,
			state: extVlimitState{
				ibank_or_obank: ibank_or_obank,
			}, Lookahead: &extVlimitLookahead{
				device: motu.device,
				state: extVlimitLookaheadState{
					ibank_or_obank: ibank_or_obank,
				}},
		},
		EnableHostVolControls: &extEnableHostVolControls{
			device: motu.device,
			state: extEnableHostVolControlsState{
				ibank_or_obank: ibank_or_obank,
			}},
		MaxUSBToHost: &extMaxUSBToHost{
			device: motu.device,
			state: extMaxUSBToHostState{
				ibank_or_obank: ibank_or_obank,
			}},
		Name: &extName{
			device: motu.device,
			state: extNameState{
				ibank_or_obank: ibank_or_obank,
			}},
		MaxCh: &extMaxCh{
			device: motu.device,
			state: extMaxChState{
				ibank_or_obank: ibank_or_obank,
			}},
		NumCh: &extNumCh{
			device: motu.device,
			state: extNumChState{
				ibank_or_obank: ibank_or_obank,
			}},
		UserCh: &extUserCh{
			device: motu.device,
			state: extUserChState{
				ibank_or_obank: ibank_or_obank,
			}},
		CalcCh: &extCalcCh{
			device: motu.device,
			state: extCalcChState{
				ibank_or_obank: ibank_or_obank,
			}},
		Smux: &extSmux{
			device: motu.device,
			state: extSmuxState{
				ibank_or_obank: ibank_or_obank,
			}},
	}
}

func (motu *Motu) Avb(uid int64) *avb {
	return &avb{
		state: avbState{
			uid: uid,
		},
		device: motu.device,
		Devs: &avbDevs{
			device: motu.device,
			state: avbDevsState{
				uid: uid,
			}},
		Entity_model_id_h: &avbEntity_model_id_h{
			device: motu.device,
			state: avbEntity_model_id_hState{
				uid: uid,
			}},
		Entity_model_id_l: &avbEntity_model_id_l{
			device: motu.device,
			state: avbEntity_model_id_lState{
				uid: uid,
			}},
		Entity_name: &avbEntity_name{
			device: motu.device,
			state: avbEntity_nameState{
				uid: uid,
			}},
		Model_name: &avbModel_name{
			device: motu.device,
			state: avbModel_nameState{
				uid: uid,
			}},
		Hostname: &avbHostname{
			device: motu.device,
			state: avbHostnameState{
				uid: uid,
			}},
		Master_clock: &avbMaster_clock{
			device: motu.device,
			state: avbMaster_clockState{
				uid: uid,
			}, Capable: &avbMaster_clockCapable{
				device: motu.device,
				state: avbMaster_clockCapableState{
					uid: uid,
				}},
			Uid: &avbMaster_clockUid{
				device: motu.device,
				state: avbMaster_clockUidState{
					uid: uid,
				}},
		},
		Vendor_name: &avbVendor_name{
			device: motu.device,
			state: avbVendor_nameState{
				uid: uid,
			}},
		Firmware_version: &avbFirmware_version{
			device: motu.device,
			state: avbFirmware_versionState{
				uid: uid,
			}},
		Serial_number: &avbSerial_number{
			device: motu.device,
			state: avbSerial_numberState{
				uid: uid,
			}},
		Controller_ignore: &avbController_ignore{
			device: motu.device,
			state: avbController_ignoreState{
				uid: uid,
			}},
		Acquired_id: &avbAcquired_id{
			device: motu.device,
			state: avbAcquired_idState{
				uid: uid,
			}},
		Apiversion: &avbApiversion{
			device: motu.device,
			state: avbApiversionState{
				uid: uid,
			}},
		Url: &avbUrl{
			device: motu.device,
			state: avbUrlState{
				uid: uid,
			}},
		Current_configuration: &avbCurrent_configuration{
			device: motu.device,
			state: avbCurrent_configurationState{
				uid: uid,
			}},
	}
}

type uid struct {
	d *HTTPDatastore
}

func (ep *uid) Bind(callback func(string) error) {
	addr := "/uid"
	ep.device.BindString(addr, callback)
}

type ext struct {
	d                     *HTTPDatastore
	Caps                  *extCaps
	ClockLocked           *extClockLocked
	WordClockMode         *extWordClockMode
	WordClockThru         *extWordClockThru
	SmuxPerBank           *extSmuxPerBank
	Vlimit                *extVlimit
	EnableHostVolControls *extEnableHostVolControls
	MaxUSBToHost          *extMaxUSBToHost
	Name                  *extName
	MaxCh                 *extMaxCh
	NumCh                 *extNumCh
	UserCh                *extUserCh
	CalcCh                *extCalcCh
	Smux                  *extSmux
	state                 extState
}

type extState struct {
	ibank_or_obank int64
}

func (ext *ext) Ibank(index int64) *extIbank {
	return &extIbank{
		state: extIbankState{
			ibank_or_obank: ext.state.ibank_or_obank,
			index:          index,
		},
		device: ext.device,
		MadiClock: &extIbankMadiClock{
			device: ext.device,
			state: extIbankMadiClockState{
				index: index,
			}},
		MadiFormat: &extIbankMadiFormat{
			device: ext.device,
			state: extIbankMadiFormatState{
				index: index,
			}},
	}
}

func (ext *ext) Obank(index int64) *extObank {
	return &extObank{
		state: extObankState{
			ibank_or_obank: ext.state.ibank_or_obank,
			index:          index,
		},
		device: ext.device,
		MadiClock: &extObankMadiClock{
			device: ext.device,
			state: extObankMadiClockState{
				index: index,
			}},
		MadiFormat: &extObankMadiFormat{
			device: ext.device,
			state: extObankMadiFormatState{
				index: index,
			}},
	}
}

func (ext *ext) Ch(index int64) *extCh {
	return &extCh{
		state: extChState{
			ibank_or_obank: ext.state.ibank_or_obank,
			index:          index,
		},
		device: ext.device,
		Name: &extChName{
			device: ext.device,
			state: extChNameState{
				index: index,
			}},
		Phase: &extChPhase{
			device: ext.device,
			state: extChPhaseState{
				index: index,
			}},
		Pad: &extChPad{
			device: ext.device,
			state: extChPadState{
				index: index,
			}},
		Trim: &extChTrim{
			device: ext.device,
			state: extChTrimState{
				index: index,
			}},
		TrimRange: &extChTrimRange{
			device: ext.device,
			state: extChTrimRangeState{
				index: index,
			}},
		StereoTrim: &extChStereoTrim{
			device: ext.device,
			state: extChStereoTrimState{
				index: index,
			}},
		StereoTrimRange: &extChStereoTrimRange{
			device: ext.device,
			state: extChStereoTrimRangeState{
				index: index,
			}},
		Connection: &extChConnection{
			device: ext.device,
			state: extChConnectionState{
				index: index,
			}},
	}
}

type extCaps struct {
	d      *HTTPDatastore
	Avb    *extCapsAvb
	Router *extCapsRouter
	Mixer  *extCapsMixer
	state  extCapsState
}

type extCapsState struct {
	ibank_or_obank int64
}

type extCapsAvb struct {
	d     *HTTPDatastore
	state extCapsAvbState
}

type extCapsAvbState struct {
	ibank_or_obank int64
}

func (ep *extCapsAvb) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/caps/avb",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

type extCapsRouter struct {
	d     *HTTPDatastore
	state extCapsRouterState
}

type extCapsRouterState struct {
	ibank_or_obank int64
}

func (ep *extCapsRouter) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/caps/router",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

type extCapsMixer struct {
	d     *HTTPDatastore
	state extCapsMixerState
}

type extCapsMixerState struct {
	ibank_or_obank int64
}

func (ep *extCapsMixer) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/caps/mixer",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

type extClockLocked struct {
	d     *HTTPDatastore
	state extClockLockedState
}

type extClockLockedState struct {
	ibank_or_obank int64
}

func (ep *extClockLocked) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/clockLocked",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

type extWordClockMode struct {
	d     *HTTPDatastore
	state extWordClockModeState
}

type extWordClockModeState struct {
	ibank_or_obank int64
}

func (ep *extWordClockMode) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/ext/%d/wordClockMode",
		ep.state.ibank_or_obank,
	)

	ep.device.BindString(addr, callback)
}

func (ep *extWordClockMode) Set(val string) error {
	addr := fmt.Sprintf(
		"/ext/%d/wordClockMode",
		ep.state.ibank_or_obank,
	)

	return ep.device.SetString(addr, val)
}

type extWordClockThru struct {
	d     *HTTPDatastore
	state extWordClockThruState
}

type extWordClockThruState struct {
	ibank_or_obank int64
}

func (ep *extWordClockThru) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/ext/%d/wordClockThru",
		ep.state.ibank_or_obank,
	)

	ep.device.BindString(addr, callback)
}

func (ep *extWordClockThru) Set(val string) error {
	addr := fmt.Sprintf(
		"/ext/%d/wordClockThru",
		ep.state.ibank_or_obank,
	)

	return ep.device.SetString(addr, val)
}

type extSmuxPerBank struct {
	d     *HTTPDatastore
	state extSmuxPerBankState
}

type extSmuxPerBankState struct {
	ibank_or_obank int64
}

func (ep *extSmuxPerBank) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/smuxPerBank",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

type extVlimit struct {
	d         *HTTPDatastore
	Lookahead *extVlimitLookahead
	state     extVlimitState
}

type extVlimitState struct {
	ibank_or_obank int64
}

type extVlimitLookahead struct {
	d     *HTTPDatastore
	state extVlimitLookaheadState
}

type extVlimitLookaheadState struct {
	ibank_or_obank int64
}

func (ep *extVlimitLookahead) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/vlimit/lookahead",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extVlimitLookahead) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/vlimit/lookahead",
		ep.state.ibank_or_obank,
	)

	return ep.device.SetInt(addr, val)
}

type extEnableHostVolControls struct {
	d     *HTTPDatastore
	state extEnableHostVolControlsState
}

type extEnableHostVolControlsState struct {
	ibank_or_obank int64
}

func (ep *extEnableHostVolControls) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/enableHostVolControls",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extEnableHostVolControls) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/enableHostVolControls",
		ep.state.ibank_or_obank,
	)

	return ep.device.SetInt(addr, val)
}

type extMaxUSBToHost struct {
	d     *HTTPDatastore
	state extMaxUSBToHostState
}

type extMaxUSBToHostState struct {
	ibank_or_obank int64
}

func (ep *extMaxUSBToHost) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/maxUSBToHost",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extMaxUSBToHost) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/maxUSBToHost",
		ep.state.ibank_or_obank,
	)

	return ep.device.SetInt(addr, val)
}

type extName struct {
	d     *HTTPDatastore
	state extNameState
}

type extNameState struct {
	ibank_or_obank int64
}

func (ep *extName) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/ext/%d/name",
		ep.state.ibank_or_obank,
	)

	ep.device.BindString(addr, callback)
}

type extMaxCh struct {
	d     *HTTPDatastore
	state extMaxChState
}

type extMaxChState struct {
	ibank_or_obank int64
}

func (ep *extMaxCh) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/maxCh",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

type extNumCh struct {
	d     *HTTPDatastore
	state extNumChState
}

type extNumChState struct {
	ibank_or_obank int64
}

func (ep *extNumCh) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/numCh",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

type extUserCh struct {
	d     *HTTPDatastore
	state extUserChState
}

type extUserChState struct {
	ibank_or_obank int64
}

func (ep *extUserCh) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/userCh",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extUserCh) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/userCh",
		ep.state.ibank_or_obank,
	)

	return ep.device.SetInt(addr, val)
}

type extCalcCh struct {
	d     *HTTPDatastore
	state extCalcChState
}

type extCalcChState struct {
	ibank_or_obank int64
}

func (ep *extCalcCh) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/calcCh",
		ep.state.ibank_or_obank,
	)

	ep.device.BindInt(addr, callback)
}

type extSmux struct {
	d     *HTTPDatastore
	state extSmuxState
}

type extSmuxState struct {
	ibank_or_obank int64
}

func (ep *extSmux) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/ext/%d/smux",
		ep.state.ibank_or_obank,
	)

	ep.device.BindString(addr, callback)
}

func (ep *extSmux) Set(val string) error {
	addr := fmt.Sprintf(
		"/ext/%d/smux",
		ep.state.ibank_or_obank,
	)

	return ep.device.SetString(addr, val)
}

type extIbank struct {
	d          *HTTPDatastore
	MadiClock  *extIbankMadiClock
	MadiFormat *extIbankMadiFormat
	state      extIbankState
}

type extIbankState struct {
	ibank_or_obank int64
	index          int64
}

func (extIbank *extIbank) Ch(index int64) *extIbankCh {
	return &extIbankCh{
		state: extIbankChState{
			ibank_or_obank: extIbank.state.ibank_or_obank,
			index:          extIbank.state.index,
			index:          index,
		},
		device: extIbank.device,
		PhantomPower: &extIbankChPhantomPower{
			device: extIbank.device,
			state: extIbankChPhantomPowerState{
				index: index,
			}},
		VlLimit: &extIbankChVlLimit{
			device: extIbank.device,
			state: extIbankChVlLimitState{
				index: index,
			}},
		VlClip: &extIbankChVlClip{
			device: extIbank.device,
			state: extIbankChVlClipState{
				index: index,
			}},
	}
}

type extIbankMadiClock struct {
	d     *HTTPDatastore
	state extIbankMadiClockState
}

type extIbankMadiClockState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extIbankMadiClock) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ibank/%d/madiClock",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindString(addr, callback)
}

type extIbankMadiFormat struct {
	d     *HTTPDatastore
	state extIbankMadiFormatState
}

type extIbankMadiFormatState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extIbankMadiFormat) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ibank/%d/madiFormat",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

type extIbankCh struct {
	d            *HTTPDatastore
	PhantomPower *extIbankChPhantomPower
	VlLimit      *extIbankChVlLimit
	VlClip       *extIbankChVlClip
	state        extIbankChState
}

type extIbankChState struct {
	ibank_or_obank int64
	index          int64
	index          int64
}

type extIbankChPhantomPower struct {
	d     *HTTPDatastore
	state extIbankChPhantomPowerState
}

type extIbankChPhantomPowerState struct {
	ibank_or_obank int64
	index          int64
	index          int64
}

func (ep *extIbankChPhantomPower) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ibank/%d/ch/%d/phantomPower",
		ep.state.ibank_or_obank,
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extIbankChPhantomPower) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/ibank/%d/ch/%d/phantomPower",
		ep.state.ibank_or_obank,
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extIbankChVlLimit struct {
	d     *HTTPDatastore
	state extIbankChVlLimitState
}

type extIbankChVlLimitState struct {
	ibank_or_obank int64
	index          int64
	index          int64
}

func (ep *extIbankChVlLimit) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ibank/%d/ch/%d/vlLimit",
		ep.state.ibank_or_obank,
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extIbankChVlLimit) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/ibank/%d/ch/%d/vlLimit",
		ep.state.ibank_or_obank,
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extIbankChVlClip struct {
	d     *HTTPDatastore
	state extIbankChVlClipState
}

type extIbankChVlClipState struct {
	ibank_or_obank int64
	index          int64
	index          int64
}

func (ep *extIbankChVlClip) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ibank/%d/ch/%d/vlClip",
		ep.state.ibank_or_obank,
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extIbankChVlClip) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/ibank/%d/ch/%d/vlClip",
		ep.state.ibank_or_obank,
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extObank struct {
	d          *HTTPDatastore
	MadiClock  *extObankMadiClock
	MadiFormat *extObankMadiFormat
	state      extObankState
}

type extObankState struct {
	ibank_or_obank int64
	index          int64
}

func (extObank *extObank) Ch(index int64) *extObankCh {
	return &extObankCh{
		state: extObankChState{
			ibank_or_obank: extObank.state.ibank_or_obank,
			index:          extObank.state.index,
			index:          index,
		},
		device: extObank.device,
		Src: &extObankChSrc{
			device: extObank.device,
			state: extObankChSrcState{
				index: index,
			}},
	}
}

type extObankMadiClock struct {
	d     *HTTPDatastore
	state extObankMadiClockState
}

type extObankMadiClockState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extObankMadiClock) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/ext/%d/obank/%d/madiClock",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindString(addr, callback)
}

func (ep *extObankMadiClock) Set(val string) error {
	addr := fmt.Sprintf(
		"/ext/%d/obank/%d/madiClock",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	return ep.device.SetString(addr, val)
}

type extObankMadiFormat struct {
	d     *HTTPDatastore
	state extObankMadiFormatState
}

type extObankMadiFormatState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extObankMadiFormat) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/obank/%d/madiFormat",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extObankMadiFormat) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/obank/%d/madiFormat",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extObankCh struct {
	d     *HTTPDatastore
	Src   *extObankChSrc
	state extObankChState
}

type extObankChState struct {
	ibank_or_obank int64
	index          int64
	index          int64
}

type extObankChSrc struct {
	d     *HTTPDatastore
	state extObankChSrcState
}

type extObankChSrcState struct {
	ibank_or_obank int64
	index          int64
	index          int64
}

func (ep *extObankChSrc) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/obank/%d/ch/%d/src",
		ep.state.ibank_or_obank,
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extObankChSrc) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/obank/%d/ch/%d/src",
		ep.state.ibank_or_obank,
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extCh struct {
	d               *HTTPDatastore
	Name            *extChName
	Phase           *extChPhase
	Pad             *extChPad
	Trim            *extChTrim
	TrimRange       *extChTrimRange
	StereoTrim      *extChStereoTrim
	StereoTrimRange *extChStereoTrimRange
	Connection      *extChConnection
	state           extChState
}

type extChState struct {
	ibank_or_obank int64
	index          int64
}

type extChName struct {
	d     *HTTPDatastore
	state extChNameState
}

type extChNameState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extChName) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/name",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindString(addr, callback)
}

func (ep *extChName) Set(val string) error {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/name",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	return ep.device.SetString(addr, val)
}

type extChPhase struct {
	d     *HTTPDatastore
	state extChPhaseState
}

type extChPhaseState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extChPhase) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/phase",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extChPhase) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/phase",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extChPad struct {
	d     *HTTPDatastore
	state extChPadState
}

type extChPadState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extChPad) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/pad",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extChPad) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/pad",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extChTrim struct {
	d     *HTTPDatastore
	state extChTrimState
}

type extChTrimState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extChTrim) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/trim",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extChTrim) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/trim",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extChTrimRange struct {
	d     *HTTPDatastore
	state extChTrimRangeState
}

type extChTrimRangeState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extChTrimRange) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/trimRange",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extChTrimRange) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/trimRange",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extChStereoTrim struct {
	d     *HTTPDatastore
	state extChStereoTrimState
}

type extChStereoTrimState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extChStereoTrim) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/stereoTrim",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extChStereoTrim) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/stereoTrim",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extChStereoTrimRange struct {
	d     *HTTPDatastore
	state extChStereoTrimRangeState
}

type extChStereoTrimRangeState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extChStereoTrimRange) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/stereoTrimRange",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *extChStereoTrimRange) Set(val int64) error {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/stereoTrimRange",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type extChConnection struct {
	d     *HTTPDatastore
	state extChConnectionState
}

type extChConnectionState struct {
	ibank_or_obank int64
	index          int64
}

func (ep *extChConnection) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/ext/%d/ch/%d/connection",
		ep.state.ibank_or_obank,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

type avb struct {
	d                     *HTTPDatastore
	Devs                  *avbDevs
	Entity_model_id_h     *avbEntity_model_id_h
	Entity_model_id_l     *avbEntity_model_id_l
	Entity_name           *avbEntity_name
	Model_name            *avbModel_name
	Hostname              *avbHostname
	Master_clock          *avbMaster_clock
	Vendor_name           *avbVendor_name
	Firmware_version      *avbFirmware_version
	Serial_number         *avbSerial_number
	Controller_ignore     *avbController_ignore
	Acquired_id           *avbAcquired_id
	Apiversion            *avbApiversion
	Url                   *avbUrl
	Current_configuration *avbCurrent_configuration
	state                 avbState
}

type avbState struct {
	uid int64
}

func (avb *avb) Cfg(index int64) *avbCfg {
	return &avbCfg{
		state: avbCfgState{
			uid:   avb.state.uid,
			index: index,
		},
		device: avb.device,
		Object_name: &avbCfgObject_name{
			device: avb.device,
			state: avbCfgObject_nameState{
				index: index,
			}},
		Identify: &avbCfgIdentify{
			device: avb.device,
			state: avbCfgIdentifyState{
				index: index,
			}},
		Current_sampling_rate: &avbCfgCurrent_sampling_rate{
			device: avb.device,
			state: avbCfgCurrent_sampling_rateState{
				index: index,
			}},
		Sample_rates: &avbCfgSample_rates{
			device: avb.device,
			state: avbCfgSample_ratesState{
				index: index,
			}},
		Clock_source_index: &avbCfgClock_source_index{
			device: avb.device,
			state: avbCfgClock_source_indexState{
				index: index,
			}},
	}
}

type avbDevs struct {
	d     *HTTPDatastore
	state avbDevsState
}

type avbDevsState struct {
	uid int64
}

func (ep *avbDevs) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/devs",
		ep.state.uid,
	)

	ep.device.BindInt(addr, callback)
}

type avbEntity_model_id_h struct {
	d     *HTTPDatastore
	state avbEntity_model_id_hState
}

type avbEntity_model_id_hState struct {
	uid int64
}

func (ep *avbEntity_model_id_h) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/entity_model_id_h",
		ep.state.uid,
	)

	ep.device.BindInt(addr, callback)
}

type avbEntity_model_id_l struct {
	d     *HTTPDatastore
	state avbEntity_model_id_lState
}

type avbEntity_model_id_lState struct {
	uid int64
}

func (ep *avbEntity_model_id_l) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/entity_model_id_l",
		ep.state.uid,
	)

	ep.device.BindInt(addr, callback)
}

type avbEntity_name struct {
	d     *HTTPDatastore
	state avbEntity_nameState
}

type avbEntity_nameState struct {
	uid int64
}

func (ep *avbEntity_name) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/avb/%d/entity_name",
		ep.state.uid,
	)

	ep.device.BindString(addr, callback)
}

func (ep *avbEntity_name) Set(val string) error {
	addr := fmt.Sprintf(
		"/avb/%d/entity_name",
		ep.state.uid,
	)

	return ep.device.SetString(addr, val)
}

type avbModel_name struct {
	d     *HTTPDatastore
	state avbModel_nameState
}

type avbModel_nameState struct {
	uid int64
}

func (ep *avbModel_name) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/avb/%d/model_name",
		ep.state.uid,
	)

	ep.device.BindString(addr, callback)
}

type avbHostname struct {
	d     *HTTPDatastore
	state avbHostnameState
}

type avbHostnameState struct {
	uid int64
}

func (ep *avbHostname) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/hostname",
		ep.state.uid,
	)

	ep.device.BindInt(addr, callback)
}

type avbMaster_clock struct {
	d       *HTTPDatastore
	Capable *avbMaster_clockCapable
	Uid     *avbMaster_clockUid
	state   avbMaster_clockState
}

type avbMaster_clockState struct {
	uid int64
}

type avbMaster_clockCapable struct {
	d     *HTTPDatastore
	state avbMaster_clockCapableState
}

type avbMaster_clockCapableState struct {
	uid int64
}

func (ep *avbMaster_clockCapable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/master_clock/capable",
		ep.state.uid,
	)

	ep.device.BindInt(addr, callback)
}

type avbMaster_clockUid struct {
	d     *HTTPDatastore
	state avbMaster_clockUidState
}

type avbMaster_clockUidState struct {
	uid int64
}

func (ep *avbMaster_clockUid) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/master_clock/uid",
		ep.state.uid,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *avbMaster_clockUid) Set(val int64) error {
	addr := fmt.Sprintf(
		"/avb/%d/master_clock/uid",
		ep.state.uid,
	)

	return ep.device.SetInt(addr, val)
}

type avbVendor_name struct {
	d     *HTTPDatastore
	state avbVendor_nameState
}

type avbVendor_nameState struct {
	uid int64
}

func (ep *avbVendor_name) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/avb/%d/vendor_name",
		ep.state.uid,
	)

	ep.device.BindString(addr, callback)
}

type avbFirmware_version struct {
	d     *HTTPDatastore
	state avbFirmware_versionState
}

type avbFirmware_versionState struct {
	uid int64
}

func (ep *avbFirmware_version) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/avb/%d/firmware_version",
		ep.state.uid,
	)

	ep.device.BindString(addr, callback)
}

type avbSerial_number struct {
	d     *HTTPDatastore
	state avbSerial_numberState
}

type avbSerial_numberState struct {
	uid int64
}

func (ep *avbSerial_number) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/avb/%d/serial_number",
		ep.state.uid,
	)

	ep.device.BindString(addr, callback)
}

type avbController_ignore struct {
	d     *HTTPDatastore
	state avbController_ignoreState
}

type avbController_ignoreState struct {
	uid int64
}

func (ep *avbController_ignore) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/controller_ignore",
		ep.state.uid,
	)

	ep.device.BindInt(addr, callback)
}

type avbAcquired_id struct {
	d     *HTTPDatastore
	state avbAcquired_idState
}

type avbAcquired_idState struct {
	uid int64
}

func (ep *avbAcquired_id) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/avb/%d/acquired_id",
		ep.state.uid,
	)

	ep.device.BindString(addr, callback)
}

type avbApiversion struct {
	d     *HTTPDatastore
	state avbApiversionState
}

type avbApiversionState struct {
	uid int64
}

func (ep *avbApiversion) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/apiversion",
		ep.state.uid,
	)

	ep.device.BindInt(addr, callback)
}

type avbUrl struct {
	d     *HTTPDatastore
	state avbUrlState
}

type avbUrlState struct {
	uid int64
}

func (ep *avbUrl) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/url",
		ep.state.uid,
	)

	ep.device.BindInt(addr, callback)
}

type avbCurrent_configuration struct {
	d     *HTTPDatastore
	state avbCurrent_configurationState
}

type avbCurrent_configurationState struct {
	uid int64
}

func (ep *avbCurrent_configuration) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/current_configuration",
		ep.state.uid,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *avbCurrent_configuration) Set(val int64) error {
	addr := fmt.Sprintf(
		"/avb/%d/current_configuration",
		ep.state.uid,
	)

	return ep.device.SetInt(addr, val)
}

type avbCfg struct {
	d                     *HTTPDatastore
	Object_name           *avbCfgObject_name
	Identify              *avbCfgIdentify
	Current_sampling_rate *avbCfgCurrent_sampling_rate
	Sample_rates          *avbCfgSample_rates
	Clock_source_index    *avbCfgClock_source_index
	state                 avbCfgState
}

type avbCfgState struct {
	uid   int64
	index int64
}

func (avbCfg *avbCfg) Clock_sources(index int64) *avbCfgClock_sources {
	return &avbCfgClock_sources{
		state: avbCfgClock_sourcesState{
			uid:   avbCfg.state.uid,
			index: avbCfg.state.index,
			index: index,
		},
		device: avbCfg.device,
		Num: &avbCfgClock_sourcesNum{
			device: avbCfg.device,
			state: avbCfgClock_sourcesNumState{
				index: index,
			}},
		Object_name: &avbCfgClock_sourcesObject_name{
			device: avbCfg.device,
			state: avbCfgClock_sourcesObject_nameState{
				index: index,
			}},
		Type: &avbCfgClock_sourcesType{
			device: avbCfg.device,
			state: avbCfgClock_sourcesTypeState{
				index: index,
			}},
		Stream_id: &avbCfgClock_sourcesStream_id{
			device: avbCfg.device,
			state: avbCfgClock_sourcesStream_idState{
				index: index,
			}},
	}
}

func (avbCfg *avbCfg) Input_streams(index int64) *avbCfgInput_streams {
	return &avbCfgInput_streams{
		state: avbCfgInput_streamsState{
			uid:   avbCfg.state.uid,
			index: avbCfg.state.index,
			index: index,
		},
		device: avbCfg.device,
		Talker: &avbCfgInput_streamsTalker{
			device: avbCfg.device,
			state: avbCfgInput_streamsTalkerState{
				index: index,
			}},
	}
}

type avbCfgObject_name struct {
	d     *HTTPDatastore
	state avbCfgObject_nameState
}

type avbCfgObject_nameState struct {
	uid   int64
	index int64
}

func (ep *avbCfgObject_name) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/object_name",
		ep.state.uid,
		ep.state.index,
	)

	ep.device.BindString(addr, callback)
}

type avbCfgIdentify struct {
	d     *HTTPDatastore
	state avbCfgIdentifyState
}

type avbCfgIdentifyState struct {
	uid   int64
	index int64
}

func (ep *avbCfgIdentify) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/identify",
		ep.state.uid,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *avbCfgIdentify) Set(val int64) error {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/identify",
		ep.state.uid,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type avbCfgCurrent_sampling_rate struct {
	d     *HTTPDatastore
	state avbCfgCurrent_sampling_rateState
}

type avbCfgCurrent_sampling_rateState struct {
	uid   int64
	index int64
}

func (ep *avbCfgCurrent_sampling_rate) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/current_sampling_rate",
		ep.state.uid,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *avbCfgCurrent_sampling_rate) Set(val int64) error {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/current_sampling_rate",
		ep.state.uid,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type avbCfgSample_rates struct {
	d     *HTTPDatastore
	state avbCfgSample_ratesState
}

type avbCfgSample_ratesState struct {
	uid   int64
	index int64
}

func (ep *avbCfgSample_rates) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/sample_rates",
		ep.state.uid,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

type avbCfgClock_source_index struct {
	d     *HTTPDatastore
	state avbCfgClock_source_indexState
}

type avbCfgClock_source_indexState struct {
	uid   int64
	index int64
}

func (ep *avbCfgClock_source_index) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/clock_source_index",
		ep.state.uid,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *avbCfgClock_source_index) Set(val int64) error {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/clock_source_index",
		ep.state.uid,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type avbCfgClock_sources struct {
	d           *HTTPDatastore
	Num         *avbCfgClock_sourcesNum
	Object_name *avbCfgClock_sourcesObject_name
	Type        *avbCfgClock_sourcesType
	Stream_id   *avbCfgClock_sourcesStream_id
	state       avbCfgClock_sourcesState
}

type avbCfgClock_sourcesState struct {
	uid   int64
	index int64
	index int64
}

type avbCfgClock_sourcesNum struct {
	d     *HTTPDatastore
	state avbCfgClock_sourcesNumState
}

type avbCfgClock_sourcesNumState struct {
	uid   int64
	index int64
	index int64
}

func (ep *avbCfgClock_sourcesNum) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/clock_sources/%d/num",
		ep.state.uid,
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

type avbCfgClock_sourcesObject_name struct {
	d     *HTTPDatastore
	state avbCfgClock_sourcesObject_nameState
}

type avbCfgClock_sourcesObject_nameState struct {
	uid   int64
	index int64
	index int64
}

func (ep *avbCfgClock_sourcesObject_name) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/clock_sources/%d/object_name",
		ep.state.uid,
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindString(addr, callback)
}

type avbCfgClock_sourcesType struct {
	d     *HTTPDatastore
	state avbCfgClock_sourcesTypeState
}

type avbCfgClock_sourcesTypeState struct {
	uid   int64
	index int64
	index int64
}

func (ep *avbCfgClock_sourcesType) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/clock_sources/%d/type",
		ep.state.uid,
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindString(addr, callback)
}

type avbCfgClock_sourcesStream_id struct {
	d     *HTTPDatastore
	state avbCfgClock_sourcesStream_idState
}

type avbCfgClock_sourcesStream_idState struct {
	uid   int64
	index int64
	index int64
}

func (ep *avbCfgClock_sourcesStream_id) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/clock_sources/%d/stream_id",
		ep.state.uid,
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

type avbCfgInput_streams struct {
	d      *HTTPDatastore
	Talker *avbCfgInput_streamsTalker
	state  avbCfgInput_streamsState
}

type avbCfgInput_streamsState struct {
	uid   int64
	index int64
	index int64
}

type avbCfgInput_streamsTalker struct {
	d     *HTTPDatastore
	state avbCfgInput_streamsTalkerState
}

type avbCfgInput_streamsTalkerState struct {
	uid   int64
	index int64
	index int64
}

func (ep *avbCfgInput_streamsTalker) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/input_streams/%d/talker",
		ep.state.uid,
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *avbCfgInput_streamsTalker) Set(val int64) error {
	addr := fmt.Sprintf(
		"/avb/%d/cfg/%d/input_streams/%d/talker",
		ep.state.uid,
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mix struct {
	d *HTTPDatastore
}

func (mix *mix) Ctrls(effect_resource int64) *mixCtrls {
	return &mixCtrls{
		state: mixCtrlsState{
			effect_resource: effect_resource,
		},
		device: mix.device,
		Dsp: &mixCtrlsDsp{
			device: mix.device,
			state: mixCtrlsDspState{
				effect_resource: effect_resource,
			}, Usage: &mixCtrlsDspUsage{
				device: mix.device,
				state: mixCtrlsDspUsageState{
					effect_resource: effect_resource,
				}},
		},
		Avail: &mixCtrlsAvail{
			device: mix.device,
			state: mixCtrlsAvailState{
				effect_resource: effect_resource,
			}},
	}
}

func (mix *mix) Chan(index int64) *mixChan {
	return &mixChan{
		state: mixChanState{
			index: index,
		},
		device: mix.device,
		Matrix: &mixChanMatrix{
			device: mix.device,
			state: mixChanMatrixState{
				index: index,
			}, Enable: &mixChanMatrixEnable{
				device: mix.device,
				state: mixChanMatrixEnableState{
					index: index,
				}},
			Solo: &mixChanMatrixSolo{
				device: mix.device,
				state: mixChanMatrixSoloState{
					index: index,
				}},
			Mute: &mixChanMatrixMute{
				device: mix.device,
				state: mixChanMatrixMuteState{
					index: index,
				}},
			Pan: &mixChanMatrixPan{
				device: mix.device,
				state: mixChanMatrixPanState{
					index: index,
				}},
			Fader: &mixChanMatrixFader{
				device: mix.device,
				state: mixChanMatrixFaderState{
					index: index,
				}},
		},
		Hpf: &mixChanHpf{
			device: mix.device,
			state: mixChanHpfState{
				index: index,
			}, Enable: &mixChanHpfEnable{
				device: mix.device,
				state: mixChanHpfEnableState{
					index: index,
				}},
			Freq: &mixChanHpfFreq{
				device: mix.device,
				state: mixChanHpfFreqState{
					index: index,
				}},
		},
		Eq: &mixChanEq{
			device: mix.device,
			state: mixChanEqState{
				index: index,
			}, Highshelf: &mixChanEqHighshelf{
				device: mix.device,
				state: mixChanEqHighshelfState{
					index: index,
				}, Enable: &mixChanEqHighshelfEnable{
					device: mix.device,
					state: mixChanEqHighshelfEnableState{
						index: index,
					}},
				Freq: &mixChanEqHighshelfFreq{
					device: mix.device,
					state: mixChanEqHighshelfFreqState{
						index: index,
					}},
				Gain: &mixChanEqHighshelfGain{
					device: mix.device,
					state: mixChanEqHighshelfGainState{
						index: index,
					}},
				Bw: &mixChanEqHighshelfBw{
					device: mix.device,
					state: mixChanEqHighshelfBwState{
						index: index,
					}},
				Mode: &mixChanEqHighshelfMode{
					device: mix.device,
					state: mixChanEqHighshelfModeState{
						index: index,
					}},
			},
			Mid1: &mixChanEqMid1{
				device: mix.device,
				state: mixChanEqMid1State{
					index: index,
				}, Enable: &mixChanEqMid1Enable{
					device: mix.device,
					state: mixChanEqMid1EnableState{
						index: index,
					}},
				Freq: &mixChanEqMid1Freq{
					device: mix.device,
					state: mixChanEqMid1FreqState{
						index: index,
					}},
				Gain: &mixChanEqMid1Gain{
					device: mix.device,
					state: mixChanEqMid1GainState{
						index: index,
					}},
				Bw: &mixChanEqMid1Bw{
					device: mix.device,
					state: mixChanEqMid1BwState{
						index: index,
					}},
			},
			Mid2: &mixChanEqMid2{
				device: mix.device,
				state: mixChanEqMid2State{
					index: index,
				}, Enable: &mixChanEqMid2Enable{
					device: mix.device,
					state: mixChanEqMid2EnableState{
						index: index,
					}},
				Freq: &mixChanEqMid2Freq{
					device: mix.device,
					state: mixChanEqMid2FreqState{
						index: index,
					}},
				Gain: &mixChanEqMid2Gain{
					device: mix.device,
					state: mixChanEqMid2GainState{
						index: index,
					}},
				Bw: &mixChanEqMid2Bw{
					device: mix.device,
					state: mixChanEqMid2BwState{
						index: index,
					}},
			},
			Lowshelf: &mixChanEqLowshelf{
				device: mix.device,
				state: mixChanEqLowshelfState{
					index: index,
				}, Enable: &mixChanEqLowshelfEnable{
					device: mix.device,
					state: mixChanEqLowshelfEnableState{
						index: index,
					}},
				Freq: &mixChanEqLowshelfFreq{
					device: mix.device,
					state: mixChanEqLowshelfFreqState{
						index: index,
					}},
				Gain: &mixChanEqLowshelfGain{
					device: mix.device,
					state: mixChanEqLowshelfGainState{
						index: index,
					}},
				Bw: &mixChanEqLowshelfBw{
					device: mix.device,
					state: mixChanEqLowshelfBwState{
						index: index,
					}},
				Mode: &mixChanEqLowshelfMode{
					device: mix.device,
					state: mixChanEqLowshelfModeState{
						index: index,
					}},
			},
		},
		Gate: &mixChanGate{
			device: mix.device,
			state: mixChanGateState{
				index: index,
			}, Enable: &mixChanGateEnable{
				device: mix.device,
				state: mixChanGateEnableState{
					index: index,
				}},
			Release: &mixChanGateRelease{
				device: mix.device,
				state: mixChanGateReleaseState{
					index: index,
				}},
			Threshold: &mixChanGateThreshold{
				device: mix.device,
				state: mixChanGateThresholdState{
					index: index,
				}},
			Attack: &mixChanGateAttack{
				device: mix.device,
				state: mixChanGateAttackState{
					index: index,
				}},
		},
		Comp: &mixChanComp{
			device: mix.device,
			state: mixChanCompState{
				index: index,
			}, Enable: &mixChanCompEnable{
				device: mix.device,
				state: mixChanCompEnableState{
					index: index,
				}},
			Release: &mixChanCompRelease{
				device: mix.device,
				state: mixChanCompReleaseState{
					index: index,
				}},
			Threshold: &mixChanCompThreshold{
				device: mix.device,
				state: mixChanCompThresholdState{
					index: index,
				}},
			Ratio: &mixChanCompRatio{
				device: mix.device,
				state: mixChanCompRatioState{
					index: index,
				}},
			Attack: &mixChanCompAttack{
				device: mix.device,
				state: mixChanCompAttackState{
					index: index,
				}},
			Trim: &mixChanCompTrim{
				device: mix.device,
				state: mixChanCompTrimState{
					index: index,
				}},
			Peak: &mixChanCompPeak{
				device: mix.device,
				state: mixChanCompPeakState{
					index: index,
				}},
		},
	}
}

func (mix *mix) Main(index int64) *mixMain {
	return &mixMain{
		state: mixMainState{
			index: index,
		},
		device: mix.device,
		Eq: &mixMainEq{
			device: mix.device,
			state: mixMainEqState{
				index: index,
			}, Highshelf: &mixMainEqHighshelf{
				device: mix.device,
				state: mixMainEqHighshelfState{
					index: index,
				}, Enable: &mixMainEqHighshelfEnable{
					device: mix.device,
					state: mixMainEqHighshelfEnableState{
						index: index,
					}},
				Freq: &mixMainEqHighshelfFreq{
					device: mix.device,
					state: mixMainEqHighshelfFreqState{
						index: index,
					}},
				Gain: &mixMainEqHighshelfGain{
					device: mix.device,
					state: mixMainEqHighshelfGainState{
						index: index,
					}},
				Bw: &mixMainEqHighshelfBw{
					device: mix.device,
					state: mixMainEqHighshelfBwState{
						index: index,
					}},
				Mode: &mixMainEqHighshelfMode{
					device: mix.device,
					state: mixMainEqHighshelfModeState{
						index: index,
					}},
			},
			Mid1: &mixMainEqMid1{
				device: mix.device,
				state: mixMainEqMid1State{
					index: index,
				}, Enable: &mixMainEqMid1Enable{
					device: mix.device,
					state: mixMainEqMid1EnableState{
						index: index,
					}},
				Freq: &mixMainEqMid1Freq{
					device: mix.device,
					state: mixMainEqMid1FreqState{
						index: index,
					}},
				Gain: &mixMainEqMid1Gain{
					device: mix.device,
					state: mixMainEqMid1GainState{
						index: index,
					}},
				Bw: &mixMainEqMid1Bw{
					device: mix.device,
					state: mixMainEqMid1BwState{
						index: index,
					}},
			},
			Mid2: &mixMainEqMid2{
				device: mix.device,
				state: mixMainEqMid2State{
					index: index,
				}, Enable: &mixMainEqMid2Enable{
					device: mix.device,
					state: mixMainEqMid2EnableState{
						index: index,
					}},
				Freq: &mixMainEqMid2Freq{
					device: mix.device,
					state: mixMainEqMid2FreqState{
						index: index,
					}},
				Gain: &mixMainEqMid2Gain{
					device: mix.device,
					state: mixMainEqMid2GainState{
						index: index,
					}},
				Bw: &mixMainEqMid2Bw{
					device: mix.device,
					state: mixMainEqMid2BwState{
						index: index,
					}},
			},
			Lowshelf: &mixMainEqLowshelf{
				device: mix.device,
				state: mixMainEqLowshelfState{
					index: index,
				}, Enable: &mixMainEqLowshelfEnable{
					device: mix.device,
					state: mixMainEqLowshelfEnableState{
						index: index,
					}},
				Freq: &mixMainEqLowshelfFreq{
					device: mix.device,
					state: mixMainEqLowshelfFreqState{
						index: index,
					}},
				Gain: &mixMainEqLowshelfGain{
					device: mix.device,
					state: mixMainEqLowshelfGainState{
						index: index,
					}},
				Bw: &mixMainEqLowshelfBw{
					device: mix.device,
					state: mixMainEqLowshelfBwState{
						index: index,
					}},
				Mode: &mixMainEqLowshelfMode{
					device: mix.device,
					state: mixMainEqLowshelfModeState{
						index: index,
					}},
			},
		},
		Leveler: &mixMainLeveler{
			device: mix.device,
			state: mixMainLevelerState{
				index: index,
			}, Enable: &mixMainLevelerEnable{
				device: mix.device,
				state: mixMainLevelerEnableState{
					index: index,
				}},
			Makeup: &mixMainLevelerMakeup{
				device: mix.device,
				state: mixMainLevelerMakeupState{
					index: index,
				}},
			Reduction: &mixMainLevelerReduction{
				device: mix.device,
				state: mixMainLevelerReductionState{
					index: index,
				}},
			Limit: &mixMainLevelerLimit{
				device: mix.device,
				state: mixMainLevelerLimitState{
					index: index,
				}},
		},
		Matrix: &mixMainMatrix{
			device: mix.device,
			state: mixMainMatrixState{
				index: index,
			}, Enable: &mixMainMatrixEnable{
				device: mix.device,
				state: mixMainMatrixEnableState{
					index: index,
				}},
			Mute: &mixMainMatrixMute{
				device: mix.device,
				state: mixMainMatrixMuteState{
					index: index,
				}},
			Fader: &mixMainMatrixFader{
				device: mix.device,
				state: mixMainMatrixFaderState{
					index: index,
				}},
		},
	}
}

func (mix *mix) Aux(index int64) *mixAux {
	return &mixAux{
		state: mixAuxState{
			index: index,
		},
		device: mix.device,
		Eq: &mixAuxEq{
			device: mix.device,
			state: mixAuxEqState{
				index: index,
			}, Highshelf: &mixAuxEqHighshelf{
				device: mix.device,
				state: mixAuxEqHighshelfState{
					index: index,
				}, Enable: &mixAuxEqHighshelfEnable{
					device: mix.device,
					state: mixAuxEqHighshelfEnableState{
						index: index,
					}},
				Freq: &mixAuxEqHighshelfFreq{
					device: mix.device,
					state: mixAuxEqHighshelfFreqState{
						index: index,
					}},
				Gain: &mixAuxEqHighshelfGain{
					device: mix.device,
					state: mixAuxEqHighshelfGainState{
						index: index,
					}},
				Bw: &mixAuxEqHighshelfBw{
					device: mix.device,
					state: mixAuxEqHighshelfBwState{
						index: index,
					}},
				Mode: &mixAuxEqHighshelfMode{
					device: mix.device,
					state: mixAuxEqHighshelfModeState{
						index: index,
					}},
			},
			Mid1: &mixAuxEqMid1{
				device: mix.device,
				state: mixAuxEqMid1State{
					index: index,
				}, Enable: &mixAuxEqMid1Enable{
					device: mix.device,
					state: mixAuxEqMid1EnableState{
						index: index,
					}},
				Freq: &mixAuxEqMid1Freq{
					device: mix.device,
					state: mixAuxEqMid1FreqState{
						index: index,
					}},
				Gain: &mixAuxEqMid1Gain{
					device: mix.device,
					state: mixAuxEqMid1GainState{
						index: index,
					}},
				Bw: &mixAuxEqMid1Bw{
					device: mix.device,
					state: mixAuxEqMid1BwState{
						index: index,
					}},
			},
			Mid2: &mixAuxEqMid2{
				device: mix.device,
				state: mixAuxEqMid2State{
					index: index,
				}, Enable: &mixAuxEqMid2Enable{
					device: mix.device,
					state: mixAuxEqMid2EnableState{
						index: index,
					}},
				Freq: &mixAuxEqMid2Freq{
					device: mix.device,
					state: mixAuxEqMid2FreqState{
						index: index,
					}},
				Gain: &mixAuxEqMid2Gain{
					device: mix.device,
					state: mixAuxEqMid2GainState{
						index: index,
					}},
				Bw: &mixAuxEqMid2Bw{
					device: mix.device,
					state: mixAuxEqMid2BwState{
						index: index,
					}},
			},
			Lowshelf: &mixAuxEqLowshelf{
				device: mix.device,
				state: mixAuxEqLowshelfState{
					index: index,
				}, Enable: &mixAuxEqLowshelfEnable{
					device: mix.device,
					state: mixAuxEqLowshelfEnableState{
						index: index,
					}},
				Freq: &mixAuxEqLowshelfFreq{
					device: mix.device,
					state: mixAuxEqLowshelfFreqState{
						index: index,
					}},
				Gain: &mixAuxEqLowshelfGain{
					device: mix.device,
					state: mixAuxEqLowshelfGainState{
						index: index,
					}},
				Bw: &mixAuxEqLowshelfBw{
					device: mix.device,
					state: mixAuxEqLowshelfBwState{
						index: index,
					}},
				Mode: &mixAuxEqLowshelfMode{
					device: mix.device,
					state: mixAuxEqLowshelfModeState{
						index: index,
					}},
			},
		},
		Matrix: &mixAuxMatrix{
			device: mix.device,
			state: mixAuxMatrixState{
				index: index,
			}, Enable: &mixAuxMatrixEnable{
				device: mix.device,
				state: mixAuxMatrixEnableState{
					index: index,
				}},
			Prefader: &mixAuxMatrixPrefader{
				device: mix.device,
				state: mixAuxMatrixPrefaderState{
					index: index,
				}},
			Panner: &mixAuxMatrixPanner{
				device: mix.device,
				state: mixAuxMatrixPannerState{
					index: index,
				}},
			Mute: &mixAuxMatrixMute{
				device: mix.device,
				state: mixAuxMatrixMuteState{
					index: index,
				}},
			Fader: &mixAuxMatrixFader{
				device: mix.device,
				state: mixAuxMatrixFaderState{
					index: index,
				}},
		},
	}
}

func (mix *mix) Group(index int64) *mixGroup {
	return &mixGroup{
		state: mixGroupState{
			index: index,
		},
		device: mix.device,
		Matrix: &mixGroupMatrix{
			device: mix.device,
			state: mixGroupMatrixState{
				index: index,
			}, Enable: &mixGroupMatrixEnable{
				device: mix.device,
				state: mixGroupMatrixEnableState{
					index: index,
				}},
			Solo: &mixGroupMatrixSolo{
				device: mix.device,
				state: mixGroupMatrixSoloState{
					index: index,
				}},
			Prefader: &mixGroupMatrixPrefader{
				device: mix.device,
				state: mixGroupMatrixPrefaderState{
					index: index,
				}},
			Panner: &mixGroupMatrixPanner{
				device: mix.device,
				state: mixGroupMatrixPannerState{
					index: index,
				}},
			Mute: &mixGroupMatrixMute{
				device: mix.device,
				state: mixGroupMatrixMuteState{
					index: index,
				}},
			Fader: &mixGroupMatrixFader{
				device: mix.device,
				state: mixGroupMatrixFaderState{
					index: index,
				}},
		},
		Eq: &mixGroupEq{
			device: mix.device,
			state: mixGroupEqState{
				index: index,
			}, Highshelf: &mixGroupEqHighshelf{
				device: mix.device,
				state: mixGroupEqHighshelfState{
					index: index,
				}, Enable: &mixGroupEqHighshelfEnable{
					device: mix.device,
					state: mixGroupEqHighshelfEnableState{
						index: index,
					}},
				Freq: &mixGroupEqHighshelfFreq{
					device: mix.device,
					state: mixGroupEqHighshelfFreqState{
						index: index,
					}},
				Gain: &mixGroupEqHighshelfGain{
					device: mix.device,
					state: mixGroupEqHighshelfGainState{
						index: index,
					}},
				Bw: &mixGroupEqHighshelfBw{
					device: mix.device,
					state: mixGroupEqHighshelfBwState{
						index: index,
					}},
				Mode: &mixGroupEqHighshelfMode{
					device: mix.device,
					state: mixGroupEqHighshelfModeState{
						index: index,
					}},
			},
			Mid1: &mixGroupEqMid1{
				device: mix.device,
				state: mixGroupEqMid1State{
					index: index,
				}, Enable: &mixGroupEqMid1Enable{
					device: mix.device,
					state: mixGroupEqMid1EnableState{
						index: index,
					}},
				Freq: &mixGroupEqMid1Freq{
					device: mix.device,
					state: mixGroupEqMid1FreqState{
						index: index,
					}},
				Gain: &mixGroupEqMid1Gain{
					device: mix.device,
					state: mixGroupEqMid1GainState{
						index: index,
					}},
				Bw: &mixGroupEqMid1Bw{
					device: mix.device,
					state: mixGroupEqMid1BwState{
						index: index,
					}},
			},
			Mid2: &mixGroupEqMid2{
				device: mix.device,
				state: mixGroupEqMid2State{
					index: index,
				}, Enable: &mixGroupEqMid2Enable{
					device: mix.device,
					state: mixGroupEqMid2EnableState{
						index: index,
					}},
				Freq: &mixGroupEqMid2Freq{
					device: mix.device,
					state: mixGroupEqMid2FreqState{
						index: index,
					}},
				Gain: &mixGroupEqMid2Gain{
					device: mix.device,
					state: mixGroupEqMid2GainState{
						index: index,
					}},
				Bw: &mixGroupEqMid2Bw{
					device: mix.device,
					state: mixGroupEqMid2BwState{
						index: index,
					}},
			},
			Lowshelf: &mixGroupEqLowshelf{
				device: mix.device,
				state: mixGroupEqLowshelfState{
					index: index,
				}, Enable: &mixGroupEqLowshelfEnable{
					device: mix.device,
					state: mixGroupEqLowshelfEnableState{
						index: index,
					}},
				Freq: &mixGroupEqLowshelfFreq{
					device: mix.device,
					state: mixGroupEqLowshelfFreqState{
						index: index,
					}},
				Gain: &mixGroupEqLowshelfGain{
					device: mix.device,
					state: mixGroupEqLowshelfGainState{
						index: index,
					}},
				Bw: &mixGroupEqLowshelfBw{
					device: mix.device,
					state: mixGroupEqLowshelfBwState{
						index: index,
					}},
				Mode: &mixGroupEqLowshelfMode{
					device: mix.device,
					state: mixGroupEqLowshelfModeState{
						index: index,
					}},
			},
		},
		Leveler: &mixGroupLeveler{
			device: mix.device,
			state: mixGroupLevelerState{
				index: index,
			}, Enable: &mixGroupLevelerEnable{
				device: mix.device,
				state: mixGroupLevelerEnableState{
					index: index,
				}},
			Makeup: &mixGroupLevelerMakeup{
				device: mix.device,
				state: mixGroupLevelerMakeupState{
					index: index,
				}},
			Reduction: &mixGroupLevelerReduction{
				device: mix.device,
				state: mixGroupLevelerReductionState{
					index: index,
				}},
			Limit: &mixGroupLevelerLimit{
				device: mix.device,
				state: mixGroupLevelerLimitState{
					index: index,
				}},
		},
	}
}

func (mix *mix) Reverb(index int64) *mixReverb {
	return &mixReverb{
		state: mixReverbState{
			index: index,
		},
		device: mix.device,
		Matrix: &mixReverbMatrix{
			device: mix.device,
			state: mixReverbMatrixState{
				index: index,
			}, Enable: &mixReverbMatrixEnable{
				device: mix.device,
				state: mixReverbMatrixEnableState{
					index: index,
				}},
			Solo: &mixReverbMatrixSolo{
				device: mix.device,
				state: mixReverbMatrixSoloState{
					index: index,
				}},
			Prefader: &mixReverbMatrixPrefader{
				device: mix.device,
				state: mixReverbMatrixPrefaderState{
					index: index,
				}},
			Panner: &mixReverbMatrixPanner{
				device: mix.device,
				state: mixReverbMatrixPannerState{
					index: index,
				}},
			Mute: &mixReverbMatrixMute{
				device: mix.device,
				state: mixReverbMatrixMuteState{
					index: index,
				}},
			Fader: &mixReverbMatrixFader{
				device: mix.device,
				state: mixReverbMatrixFaderState{
					index: index,
				}},
		},
		Eq: &mixReverbEq{
			device: mix.device,
			state: mixReverbEqState{
				index: index,
			}, Highshelf: &mixReverbEqHighshelf{
				device: mix.device,
				state: mixReverbEqHighshelfState{
					index: index,
				}, Enable: &mixReverbEqHighshelfEnable{
					device: mix.device,
					state: mixReverbEqHighshelfEnableState{
						index: index,
					}},
				Freq: &mixReverbEqHighshelfFreq{
					device: mix.device,
					state: mixReverbEqHighshelfFreqState{
						index: index,
					}},
				Gain: &mixReverbEqHighshelfGain{
					device: mix.device,
					state: mixReverbEqHighshelfGainState{
						index: index,
					}},
				Bw: &mixReverbEqHighshelfBw{
					device: mix.device,
					state: mixReverbEqHighshelfBwState{
						index: index,
					}},
				Mode: &mixReverbEqHighshelfMode{
					device: mix.device,
					state: mixReverbEqHighshelfModeState{
						index: index,
					}},
			},
			Mid1: &mixReverbEqMid1{
				device: mix.device,
				state: mixReverbEqMid1State{
					index: index,
				}, Enable: &mixReverbEqMid1Enable{
					device: mix.device,
					state: mixReverbEqMid1EnableState{
						index: index,
					}},
				Freq: &mixReverbEqMid1Freq{
					device: mix.device,
					state: mixReverbEqMid1FreqState{
						index: index,
					}},
				Gain: &mixReverbEqMid1Gain{
					device: mix.device,
					state: mixReverbEqMid1GainState{
						index: index,
					}},
				Bw: &mixReverbEqMid1Bw{
					device: mix.device,
					state: mixReverbEqMid1BwState{
						index: index,
					}},
			},
			Mid2: &mixReverbEqMid2{
				device: mix.device,
				state: mixReverbEqMid2State{
					index: index,
				}, Enable: &mixReverbEqMid2Enable{
					device: mix.device,
					state: mixReverbEqMid2EnableState{
						index: index,
					}},
				Freq: &mixReverbEqMid2Freq{
					device: mix.device,
					state: mixReverbEqMid2FreqState{
						index: index,
					}},
				Gain: &mixReverbEqMid2Gain{
					device: mix.device,
					state: mixReverbEqMid2GainState{
						index: index,
					}},
				Bw: &mixReverbEqMid2Bw{
					device: mix.device,
					state: mixReverbEqMid2BwState{
						index: index,
					}},
			},
			Lowshelf: &mixReverbEqLowshelf{
				device: mix.device,
				state: mixReverbEqLowshelfState{
					index: index,
				}, Enable: &mixReverbEqLowshelfEnable{
					device: mix.device,
					state: mixReverbEqLowshelfEnableState{
						index: index,
					}},
				Freq: &mixReverbEqLowshelfFreq{
					device: mix.device,
					state: mixReverbEqLowshelfFreqState{
						index: index,
					}},
				Gain: &mixReverbEqLowshelfGain{
					device: mix.device,
					state: mixReverbEqLowshelfGainState{
						index: index,
					}},
				Bw: &mixReverbEqLowshelfBw{
					device: mix.device,
					state: mixReverbEqLowshelfBwState{
						index: index,
					}},
				Mode: &mixReverbEqLowshelfMode{
					device: mix.device,
					state: mixReverbEqLowshelfModeState{
						index: index,
					}},
			},
		},
		Leveler: &mixReverbLeveler{
			device: mix.device,
			state: mixReverbLevelerState{
				index: index,
			}, Enable: &mixReverbLevelerEnable{
				device: mix.device,
				state: mixReverbLevelerEnableState{
					index: index,
				}},
			Makeup: &mixReverbLevelerMakeup{
				device: mix.device,
				state: mixReverbLevelerMakeupState{
					index: index,
				}},
			Reduction: &mixReverbLevelerReduction{
				device: mix.device,
				state: mixReverbLevelerReductionState{
					index: index,
				}},
			Limit: &mixReverbLevelerLimit{
				device: mix.device,
				state: mixReverbLevelerLimitState{
					index: index,
				}},
		},
		Reverb: &mixReverbReverb{
			device: mix.device,
			state: mixReverbReverbState{
				index: index,
			}, Enable: &mixReverbReverbEnable{
				device: mix.device,
				state: mixReverbReverbEnableState{
					index: index,
				}},
			Reverbtime: &mixReverbReverbReverbtime{
				device: mix.device,
				state: mixReverbReverbReverbtimeState{
					index: index,
				}},
			Hf: &mixReverbReverbHf{
				device: mix.device,
				state: mixReverbReverbHfState{
					index: index,
				}},
			Mf: &mixReverbReverbMf{
				device: mix.device,
				state: mixReverbReverbMfState{
					index: index,
				}},
			Predelay: &mixReverbReverbPredelay{
				device: mix.device,
				state: mixReverbReverbPredelayState{
					index: index,
				}},
			Mfratio: &mixReverbReverbMfratio{
				device: mix.device,
				state: mixReverbReverbMfratioState{
					index: index,
				}},
			Hfratio: &mixReverbReverbHfratio{
				device: mix.device,
				state: mixReverbReverbHfratioState{
					index: index,
				}},
			Tailspread: &mixReverbReverbTailspread{
				device: mix.device,
				state: mixReverbReverbTailspreadState{
					index: index,
				}},
			Mod: &mixReverbReverbMod{
				device: mix.device,
				state: mixReverbReverbModState{
					index: index,
				}},
		},
	}
}

func (mix *mix) Monitor(index int64) *mixMonitor {
	return &mixMonitor{
		state: mixMonitorState{
			index: index,
		},
		device: mix.device,
		Matrix: &mixMonitorMatrix{
			device: mix.device,
			state: mixMonitorMatrixState{
				index: index,
			}, Enable: &mixMonitorMatrixEnable{
				device: mix.device,
				state: mixMonitorMatrixEnableState{
					index: index,
				}},
			Mute: &mixMonitorMatrixMute{
				device: mix.device,
				state: mixMonitorMatrixMuteState{
					index: index,
				}},
			Fader: &mixMonitorMatrixFader{
				device: mix.device,
				state: mixMonitorMatrixFaderState{
					index: index,
				}},
		},
		Assign: &mixMonitorAssign{
			device: mix.device,
			state: mixMonitorAssignState{
				index: index,
			}},
		Override: &mixMonitorOverride{
			device: mix.device,
			state: mixMonitorOverrideState{
				index: index,
			}},
		Auto: &mixMonitorAuto{
			device: mix.device,
			state: mixMonitorAutoState{
				index: index,
			}},
	}
}

type mixCtrls struct {
	d     *HTTPDatastore
	Dsp   *mixCtrlsDsp
	Avail *mixCtrlsAvail
	state mixCtrlsState
}

type mixCtrlsState struct {
	effect_resource int64
}

type mixCtrlsDsp struct {
	d     *HTTPDatastore
	Usage *mixCtrlsDspUsage
	state mixCtrlsDspState
}

type mixCtrlsDspState struct {
	effect_resource int64
}

type mixCtrlsDspUsage struct {
	d     *HTTPDatastore
	state mixCtrlsDspUsageState
}

type mixCtrlsDspUsageState struct {
	effect_resource int64
}

func (ep *mixCtrlsDspUsage) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/ctrls/%d/dsp/usage",
		ep.state.effect_resource,
	)

	ep.device.BindInt(addr, callback)
}

type mixCtrlsAvail struct {
	d     *HTTPDatastore
	state mixCtrlsAvailState
}

type mixCtrlsAvailState struct {
	effect_resource int64
}

func (ep *mixCtrlsAvail) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/ctrls/%d/avail",
		ep.state.effect_resource,
	)

	ep.device.BindInt(addr, callback)
}

type mixChan struct {
	d      *HTTPDatastore
	Matrix *mixChanMatrix
	Hpf    *mixChanHpf
	Eq     *mixChanEq
	Gate   *mixChanGate
	Comp   *mixChanComp
	state  mixChanState
}

type mixChanState struct {
	index int64
}

type mixChanMatrix struct {
	d      *HTTPDatastore
	Enable *mixChanMatrixEnable
	Solo   *mixChanMatrixSolo
	Mute   *mixChanMatrixMute
	Pan    *mixChanMatrixPan
	Fader  *mixChanMatrixFader
	state  mixChanMatrixState
}

type mixChanMatrixState struct {
	index int64
}

func (mixChanMatrix *mixChanMatrix) Aux(index int64) *mixChanMatrixAux {
	return &mixChanMatrixAux{
		state: mixChanMatrixAuxState{
			index: mixChanMatrix.state.index,
			index: index,
		},
		device: mixChanMatrix.device,
		Send: &mixChanMatrixAuxSend{
			device: mixChanMatrix.device,
			state: mixChanMatrixAuxSendState{
				index: index,
			}},
		Pan: &mixChanMatrixAuxPan{
			device: mixChanMatrix.device,
			state: mixChanMatrixAuxPanState{
				index: index,
			}},
	}
}

func (mixChanMatrix *mixChanMatrix) Group(index int64) *mixChanMatrixGroup {
	return &mixChanMatrixGroup{
		state: mixChanMatrixGroupState{
			index: mixChanMatrix.state.index,
			index: index,
		},
		device: mixChanMatrix.device,
		Send: &mixChanMatrixGroupSend{
			device: mixChanMatrix.device,
			state: mixChanMatrixGroupSendState{
				index: index,
			}},
		Pan: &mixChanMatrixGroupPan{
			device: mixChanMatrix.device,
			state: mixChanMatrixGroupPanState{
				index: index,
			}},
	}
}

func (mixChanMatrix *mixChanMatrix) Reverb(index int64) *mixChanMatrixReverb {
	return &mixChanMatrixReverb{
		state: mixChanMatrixReverbState{
			index: mixChanMatrix.state.index,
			index: index,
		},
		device: mixChanMatrix.device,
		Send: &mixChanMatrixReverbSend{
			device: mixChanMatrix.device,
			state: mixChanMatrixReverbSendState{
				index: index,
			}},
		Pan: &mixChanMatrixReverbPan{
			device: mixChanMatrix.device,
			state: mixChanMatrixReverbPanState{
				index: index,
			}},
	}
}

type mixChanMatrixAux struct {
	d     *HTTPDatastore
	Send  *mixChanMatrixAuxSend
	Pan   *mixChanMatrixAuxPan
	state mixChanMatrixAuxState
}

type mixChanMatrixAuxState struct {
	index int64
	index int64
}

type mixChanMatrixAuxSend struct {
	d     *HTTPDatastore
	state mixChanMatrixAuxSendState
}

type mixChanMatrixAuxSendState struct {
	index int64
	index int64
}

func (ep *mixChanMatrixAuxSend) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/aux/%d/send",
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanMatrixAuxSend) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/aux/%d/send",
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanMatrixAuxPan struct {
	d     *HTTPDatastore
	state mixChanMatrixAuxPanState
}

type mixChanMatrixAuxPanState struct {
	index int64
	index int64
}

func (ep *mixChanMatrixAuxPan) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/aux/%d/pan",
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanMatrixAuxPan) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/aux/%d/pan",
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanMatrixGroup struct {
	d     *HTTPDatastore
	Send  *mixChanMatrixGroupSend
	Pan   *mixChanMatrixGroupPan
	state mixChanMatrixGroupState
}

type mixChanMatrixGroupState struct {
	index int64
	index int64
}

type mixChanMatrixGroupSend struct {
	d     *HTTPDatastore
	state mixChanMatrixGroupSendState
}

type mixChanMatrixGroupSendState struct {
	index int64
	index int64
}

func (ep *mixChanMatrixGroupSend) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/group/%d/send",
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanMatrixGroupSend) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/group/%d/send",
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanMatrixGroupPan struct {
	d     *HTTPDatastore
	state mixChanMatrixGroupPanState
}

type mixChanMatrixGroupPanState struct {
	index int64
	index int64
}

func (ep *mixChanMatrixGroupPan) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/group/%d/pan",
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanMatrixGroupPan) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/group/%d/pan",
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanMatrixReverb struct {
	d     *HTTPDatastore
	Send  *mixChanMatrixReverbSend
	Pan   *mixChanMatrixReverbPan
	state mixChanMatrixReverbState
}

type mixChanMatrixReverbState struct {
	index int64
	index int64
}

type mixChanMatrixReverbSend struct {
	d     *HTTPDatastore
	state mixChanMatrixReverbSendState
}

type mixChanMatrixReverbSendState struct {
	index int64
	index int64
}

func (ep *mixChanMatrixReverbSend) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/reverb/%d/send",
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanMatrixReverbSend) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/reverb/%d/send",
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanMatrixReverbPan struct {
	d     *HTTPDatastore
	state mixChanMatrixReverbPanState
}

type mixChanMatrixReverbPanState struct {
	index int64
	index int64
}

func (ep *mixChanMatrixReverbPan) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/reverb/%d/pan",
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanMatrixReverbPan) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/reverb/%d/pan",
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanMatrixEnable struct {
	d     *HTTPDatastore
	state mixChanMatrixEnableState
}

type mixChanMatrixEnableState struct {
	index int64
}

func (ep *mixChanMatrixEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanMatrixEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanMatrixSolo struct {
	d     *HTTPDatastore
	state mixChanMatrixSoloState
}

type mixChanMatrixSoloState struct {
	index int64
}

func (ep *mixChanMatrixSolo) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/solo",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanMatrixSolo) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/solo",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanMatrixMute struct {
	d     *HTTPDatastore
	state mixChanMatrixMuteState
}

type mixChanMatrixMuteState struct {
	index int64
}

func (ep *mixChanMatrixMute) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/mute",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanMatrixMute) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/mute",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanMatrixPan struct {
	d     *HTTPDatastore
	state mixChanMatrixPanState
}

type mixChanMatrixPanState struct {
	index int64
}

func (ep *mixChanMatrixPan) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/pan",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanMatrixPan) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/pan",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanMatrixFader struct {
	d     *HTTPDatastore
	state mixChanMatrixFaderState
}

type mixChanMatrixFaderState struct {
	index int64
}

func (ep *mixChanMatrixFader) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/fader",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanMatrixFader) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/matrix/fader",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanHpf struct {
	d      *HTTPDatastore
	Enable *mixChanHpfEnable
	Freq   *mixChanHpfFreq
	state  mixChanHpfState
}

type mixChanHpfState struct {
	index int64
}

type mixChanHpfEnable struct {
	d     *HTTPDatastore
	state mixChanHpfEnableState
}

type mixChanHpfEnableState struct {
	index int64
}

func (ep *mixChanHpfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/hpf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanHpfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/hpf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanHpfFreq struct {
	d     *HTTPDatastore
	state mixChanHpfFreqState
}

type mixChanHpfFreqState struct {
	index int64
}

func (ep *mixChanHpfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/hpf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanHpfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/hpf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanEq struct {
	d         *HTTPDatastore
	Highshelf *mixChanEqHighshelf
	Mid1      *mixChanEqMid1
	Mid2      *mixChanEqMid2
	Lowshelf  *mixChanEqLowshelf
	state     mixChanEqState
}

type mixChanEqState struct {
	index int64
}

type mixChanEqHighshelf struct {
	d      *HTTPDatastore
	Enable *mixChanEqHighshelfEnable
	Freq   *mixChanEqHighshelfFreq
	Gain   *mixChanEqHighshelfGain
	Bw     *mixChanEqHighshelfBw
	Mode   *mixChanEqHighshelfMode
	state  mixChanEqHighshelfState
}

type mixChanEqHighshelfState struct {
	index int64
}

type mixChanEqHighshelfEnable struct {
	d     *HTTPDatastore
	state mixChanEqHighshelfEnableState
}

type mixChanEqHighshelfEnableState struct {
	index int64
}

func (ep *mixChanEqHighshelfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/highshelf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanEqHighshelfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/highshelf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanEqHighshelfFreq struct {
	d     *HTTPDatastore
	state mixChanEqHighshelfFreqState
}

type mixChanEqHighshelfFreqState struct {
	index int64
}

func (ep *mixChanEqHighshelfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/highshelf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanEqHighshelfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/highshelf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanEqHighshelfGain struct {
	d     *HTTPDatastore
	state mixChanEqHighshelfGainState
}

type mixChanEqHighshelfGainState struct {
	index int64
}

func (ep *mixChanEqHighshelfGain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/highshelf/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanEqHighshelfGain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/highshelf/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanEqHighshelfBw struct {
	d     *HTTPDatastore
	state mixChanEqHighshelfBwState
}

type mixChanEqHighshelfBwState struct {
	index int64
}

func (ep *mixChanEqHighshelfBw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/highshelf/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanEqHighshelfBw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/highshelf/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanEqHighshelfMode struct {
	d     *HTTPDatastore
	state mixChanEqHighshelfModeState
}

type mixChanEqHighshelfModeState struct {
	index int64
}

func (ep *mixChanEqHighshelfMode) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/highshelf/mode",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanEqHighshelfMode) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/highshelf/mode",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanEqMid1 struct {
	d      *HTTPDatastore
	Enable *mixChanEqMid1Enable
	Freq   *mixChanEqMid1Freq
	Gain   *mixChanEqMid1Gain
	Bw     *mixChanEqMid1Bw
	state  mixChanEqMid1State
}

type mixChanEqMid1State struct {
	index int64
}

type mixChanEqMid1Enable struct {
	d     *HTTPDatastore
	state mixChanEqMid1EnableState
}

type mixChanEqMid1EnableState struct {
	index int64
}

func (ep *mixChanEqMid1Enable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid1/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanEqMid1Enable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid1/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanEqMid1Freq struct {
	d     *HTTPDatastore
	state mixChanEqMid1FreqState
}

type mixChanEqMid1FreqState struct {
	index int64
}

func (ep *mixChanEqMid1Freq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid1/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanEqMid1Freq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid1/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanEqMid1Gain struct {
	d     *HTTPDatastore
	state mixChanEqMid1GainState
}

type mixChanEqMid1GainState struct {
	index int64
}

func (ep *mixChanEqMid1Gain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid1/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanEqMid1Gain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid1/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanEqMid1Bw struct {
	d     *HTTPDatastore
	state mixChanEqMid1BwState
}

type mixChanEqMid1BwState struct {
	index int64
}

func (ep *mixChanEqMid1Bw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid1/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanEqMid1Bw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid1/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanEqMid2 struct {
	d      *HTTPDatastore
	Enable *mixChanEqMid2Enable
	Freq   *mixChanEqMid2Freq
	Gain   *mixChanEqMid2Gain
	Bw     *mixChanEqMid2Bw
	state  mixChanEqMid2State
}

type mixChanEqMid2State struct {
	index int64
}

type mixChanEqMid2Enable struct {
	d     *HTTPDatastore
	state mixChanEqMid2EnableState
}

type mixChanEqMid2EnableState struct {
	index int64
}

func (ep *mixChanEqMid2Enable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid2/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanEqMid2Enable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid2/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanEqMid2Freq struct {
	d     *HTTPDatastore
	state mixChanEqMid2FreqState
}

type mixChanEqMid2FreqState struct {
	index int64
}

func (ep *mixChanEqMid2Freq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid2/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanEqMid2Freq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid2/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanEqMid2Gain struct {
	d     *HTTPDatastore
	state mixChanEqMid2GainState
}

type mixChanEqMid2GainState struct {
	index int64
}

func (ep *mixChanEqMid2Gain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid2/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanEqMid2Gain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid2/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanEqMid2Bw struct {
	d     *HTTPDatastore
	state mixChanEqMid2BwState
}

type mixChanEqMid2BwState struct {
	index int64
}

func (ep *mixChanEqMid2Bw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid2/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanEqMid2Bw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/mid2/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanEqLowshelf struct {
	d      *HTTPDatastore
	Enable *mixChanEqLowshelfEnable
	Freq   *mixChanEqLowshelfFreq
	Gain   *mixChanEqLowshelfGain
	Bw     *mixChanEqLowshelfBw
	Mode   *mixChanEqLowshelfMode
	state  mixChanEqLowshelfState
}

type mixChanEqLowshelfState struct {
	index int64
}

type mixChanEqLowshelfEnable struct {
	d     *HTTPDatastore
	state mixChanEqLowshelfEnableState
}

type mixChanEqLowshelfEnableState struct {
	index int64
}

func (ep *mixChanEqLowshelfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/lowshelf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanEqLowshelfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/lowshelf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanEqLowshelfFreq struct {
	d     *HTTPDatastore
	state mixChanEqLowshelfFreqState
}

type mixChanEqLowshelfFreqState struct {
	index int64
}

func (ep *mixChanEqLowshelfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/lowshelf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanEqLowshelfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/lowshelf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanEqLowshelfGain struct {
	d     *HTTPDatastore
	state mixChanEqLowshelfGainState
}

type mixChanEqLowshelfGainState struct {
	index int64
}

func (ep *mixChanEqLowshelfGain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/lowshelf/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanEqLowshelfGain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/lowshelf/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanEqLowshelfBw struct {
	d     *HTTPDatastore
	state mixChanEqLowshelfBwState
}

type mixChanEqLowshelfBwState struct {
	index int64
}

func (ep *mixChanEqLowshelfBw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/lowshelf/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanEqLowshelfBw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/lowshelf/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanEqLowshelfMode struct {
	d     *HTTPDatastore
	state mixChanEqLowshelfModeState
}

type mixChanEqLowshelfModeState struct {
	index int64
}

func (ep *mixChanEqLowshelfMode) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/lowshelf/mode",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanEqLowshelfMode) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/eq/lowshelf/mode",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanGate struct {
	d         *HTTPDatastore
	Enable    *mixChanGateEnable
	Release   *mixChanGateRelease
	Threshold *mixChanGateThreshold
	Attack    *mixChanGateAttack
	state     mixChanGateState
}

type mixChanGateState struct {
	index int64
}

type mixChanGateEnable struct {
	d     *HTTPDatastore
	state mixChanGateEnableState
}

type mixChanGateEnableState struct {
	index int64
}

func (ep *mixChanGateEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/gate/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanGateEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/gate/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanGateRelease struct {
	d     *HTTPDatastore
	state mixChanGateReleaseState
}

type mixChanGateReleaseState struct {
	index int64
}

func (ep *mixChanGateRelease) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/gate/release",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanGateRelease) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/gate/release",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanGateThreshold struct {
	d     *HTTPDatastore
	state mixChanGateThresholdState
}

type mixChanGateThresholdState struct {
	index int64
}

func (ep *mixChanGateThreshold) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/gate/threshold",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanGateThreshold) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/gate/threshold",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanGateAttack struct {
	d     *HTTPDatastore
	state mixChanGateAttackState
}

type mixChanGateAttackState struct {
	index int64
}

func (ep *mixChanGateAttack) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/gate/attack",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanGateAttack) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/gate/attack",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanComp struct {
	d         *HTTPDatastore
	Enable    *mixChanCompEnable
	Release   *mixChanCompRelease
	Threshold *mixChanCompThreshold
	Ratio     *mixChanCompRatio
	Attack    *mixChanCompAttack
	Trim      *mixChanCompTrim
	Peak      *mixChanCompPeak
	state     mixChanCompState
}

type mixChanCompState struct {
	index int64
}

type mixChanCompEnable struct {
	d     *HTTPDatastore
	state mixChanCompEnableState
}

type mixChanCompEnableState struct {
	index int64
}

func (ep *mixChanCompEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanCompEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixChanCompRelease struct {
	d     *HTTPDatastore
	state mixChanCompReleaseState
}

type mixChanCompReleaseState struct {
	index int64
}

func (ep *mixChanCompRelease) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/release",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanCompRelease) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/release",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanCompThreshold struct {
	d     *HTTPDatastore
	state mixChanCompThresholdState
}

type mixChanCompThresholdState struct {
	index int64
}

func (ep *mixChanCompThreshold) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/threshold",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanCompThreshold) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/threshold",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanCompRatio struct {
	d     *HTTPDatastore
	state mixChanCompRatioState
}

type mixChanCompRatioState struct {
	index int64
}

func (ep *mixChanCompRatio) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/ratio",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanCompRatio) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/ratio",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanCompAttack struct {
	d     *HTTPDatastore
	state mixChanCompAttackState
}

type mixChanCompAttackState struct {
	index int64
}

func (ep *mixChanCompAttack) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/attack",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanCompAttack) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/attack",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanCompTrim struct {
	d     *HTTPDatastore
	state mixChanCompTrimState
}

type mixChanCompTrimState struct {
	index int64
}

func (ep *mixChanCompTrim) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/trim",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixChanCompTrim) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/trim",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixChanCompPeak struct {
	d     *HTTPDatastore
	state mixChanCompPeakState
}

type mixChanCompPeakState struct {
	index int64
}

func (ep *mixChanCompPeak) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/peak",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixChanCompPeak) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/chan/%d/comp/peak",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMain struct {
	d       *HTTPDatastore
	Eq      *mixMainEq
	Leveler *mixMainLeveler
	Matrix  *mixMainMatrix
	state   mixMainState
}

type mixMainState struct {
	index int64
}

type mixMainEq struct {
	d         *HTTPDatastore
	Highshelf *mixMainEqHighshelf
	Mid1      *mixMainEqMid1
	Mid2      *mixMainEqMid2
	Lowshelf  *mixMainEqLowshelf
	state     mixMainEqState
}

type mixMainEqState struct {
	index int64
}

type mixMainEqHighshelf struct {
	d      *HTTPDatastore
	Enable *mixMainEqHighshelfEnable
	Freq   *mixMainEqHighshelfFreq
	Gain   *mixMainEqHighshelfGain
	Bw     *mixMainEqHighshelfBw
	Mode   *mixMainEqHighshelfMode
	state  mixMainEqHighshelfState
}

type mixMainEqHighshelfState struct {
	index int64
}

type mixMainEqHighshelfEnable struct {
	d     *HTTPDatastore
	state mixMainEqHighshelfEnableState
}

type mixMainEqHighshelfEnableState struct {
	index int64
}

func (ep *mixMainEqHighshelfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/highshelf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainEqHighshelfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/highshelf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainEqHighshelfFreq struct {
	d     *HTTPDatastore
	state mixMainEqHighshelfFreqState
}

type mixMainEqHighshelfFreqState struct {
	index int64
}

func (ep *mixMainEqHighshelfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/highshelf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainEqHighshelfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/highshelf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainEqHighshelfGain struct {
	d     *HTTPDatastore
	state mixMainEqHighshelfGainState
}

type mixMainEqHighshelfGainState struct {
	index int64
}

func (ep *mixMainEqHighshelfGain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/highshelf/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainEqHighshelfGain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/highshelf/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMainEqHighshelfBw struct {
	d     *HTTPDatastore
	state mixMainEqHighshelfBwState
}

type mixMainEqHighshelfBwState struct {
	index int64
}

func (ep *mixMainEqHighshelfBw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/highshelf/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainEqHighshelfBw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/highshelf/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMainEqHighshelfMode struct {
	d     *HTTPDatastore
	state mixMainEqHighshelfModeState
}

type mixMainEqHighshelfModeState struct {
	index int64
}

func (ep *mixMainEqHighshelfMode) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/highshelf/mode",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainEqHighshelfMode) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/highshelf/mode",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainEqMid1 struct {
	d      *HTTPDatastore
	Enable *mixMainEqMid1Enable
	Freq   *mixMainEqMid1Freq
	Gain   *mixMainEqMid1Gain
	Bw     *mixMainEqMid1Bw
	state  mixMainEqMid1State
}

type mixMainEqMid1State struct {
	index int64
}

type mixMainEqMid1Enable struct {
	d     *HTTPDatastore
	state mixMainEqMid1EnableState
}

type mixMainEqMid1EnableState struct {
	index int64
}

func (ep *mixMainEqMid1Enable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid1/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainEqMid1Enable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid1/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainEqMid1Freq struct {
	d     *HTTPDatastore
	state mixMainEqMid1FreqState
}

type mixMainEqMid1FreqState struct {
	index int64
}

func (ep *mixMainEqMid1Freq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid1/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainEqMid1Freq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid1/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainEqMid1Gain struct {
	d     *HTTPDatastore
	state mixMainEqMid1GainState
}

type mixMainEqMid1GainState struct {
	index int64
}

func (ep *mixMainEqMid1Gain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid1/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainEqMid1Gain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid1/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMainEqMid1Bw struct {
	d     *HTTPDatastore
	state mixMainEqMid1BwState
}

type mixMainEqMid1BwState struct {
	index int64
}

func (ep *mixMainEqMid1Bw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid1/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainEqMid1Bw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid1/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMainEqMid2 struct {
	d      *HTTPDatastore
	Enable *mixMainEqMid2Enable
	Freq   *mixMainEqMid2Freq
	Gain   *mixMainEqMid2Gain
	Bw     *mixMainEqMid2Bw
	state  mixMainEqMid2State
}

type mixMainEqMid2State struct {
	index int64
}

type mixMainEqMid2Enable struct {
	d     *HTTPDatastore
	state mixMainEqMid2EnableState
}

type mixMainEqMid2EnableState struct {
	index int64
}

func (ep *mixMainEqMid2Enable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid2/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainEqMid2Enable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid2/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainEqMid2Freq struct {
	d     *HTTPDatastore
	state mixMainEqMid2FreqState
}

type mixMainEqMid2FreqState struct {
	index int64
}

func (ep *mixMainEqMid2Freq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid2/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainEqMid2Freq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid2/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainEqMid2Gain struct {
	d     *HTTPDatastore
	state mixMainEqMid2GainState
}

type mixMainEqMid2GainState struct {
	index int64
}

func (ep *mixMainEqMid2Gain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid2/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainEqMid2Gain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid2/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMainEqMid2Bw struct {
	d     *HTTPDatastore
	state mixMainEqMid2BwState
}

type mixMainEqMid2BwState struct {
	index int64
}

func (ep *mixMainEqMid2Bw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid2/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainEqMid2Bw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/mid2/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMainEqLowshelf struct {
	d      *HTTPDatastore
	Enable *mixMainEqLowshelfEnable
	Freq   *mixMainEqLowshelfFreq
	Gain   *mixMainEqLowshelfGain
	Bw     *mixMainEqLowshelfBw
	Mode   *mixMainEqLowshelfMode
	state  mixMainEqLowshelfState
}

type mixMainEqLowshelfState struct {
	index int64
}

type mixMainEqLowshelfEnable struct {
	d     *HTTPDatastore
	state mixMainEqLowshelfEnableState
}

type mixMainEqLowshelfEnableState struct {
	index int64
}

func (ep *mixMainEqLowshelfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/lowshelf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainEqLowshelfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/lowshelf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainEqLowshelfFreq struct {
	d     *HTTPDatastore
	state mixMainEqLowshelfFreqState
}

type mixMainEqLowshelfFreqState struct {
	index int64
}

func (ep *mixMainEqLowshelfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/lowshelf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainEqLowshelfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/lowshelf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainEqLowshelfGain struct {
	d     *HTTPDatastore
	state mixMainEqLowshelfGainState
}

type mixMainEqLowshelfGainState struct {
	index int64
}

func (ep *mixMainEqLowshelfGain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/lowshelf/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainEqLowshelfGain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/lowshelf/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMainEqLowshelfBw struct {
	d     *HTTPDatastore
	state mixMainEqLowshelfBwState
}

type mixMainEqLowshelfBwState struct {
	index int64
}

func (ep *mixMainEqLowshelfBw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/lowshelf/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainEqLowshelfBw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/lowshelf/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMainEqLowshelfMode struct {
	d     *HTTPDatastore
	state mixMainEqLowshelfModeState
}

type mixMainEqLowshelfModeState struct {
	index int64
}

func (ep *mixMainEqLowshelfMode) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/lowshelf/mode",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainEqLowshelfMode) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/eq/lowshelf/mode",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainLeveler struct {
	d         *HTTPDatastore
	Enable    *mixMainLevelerEnable
	Makeup    *mixMainLevelerMakeup
	Reduction *mixMainLevelerReduction
	Limit     *mixMainLevelerLimit
	state     mixMainLevelerState
}

type mixMainLevelerState struct {
	index int64
}

type mixMainLevelerEnable struct {
	d     *HTTPDatastore
	state mixMainLevelerEnableState
}

type mixMainLevelerEnableState struct {
	index int64
}

func (ep *mixMainLevelerEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/leveler/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainLevelerEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/leveler/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainLevelerMakeup struct {
	d     *HTTPDatastore
	state mixMainLevelerMakeupState
}

type mixMainLevelerMakeupState struct {
	index int64
}

func (ep *mixMainLevelerMakeup) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/leveler/makeup",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainLevelerMakeup) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/leveler/makeup",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMainLevelerReduction struct {
	d     *HTTPDatastore
	state mixMainLevelerReductionState
}

type mixMainLevelerReductionState struct {
	index int64
}

func (ep *mixMainLevelerReduction) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/leveler/reduction",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainLevelerReduction) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/leveler/reduction",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMainLevelerLimit struct {
	d     *HTTPDatastore
	state mixMainLevelerLimitState
}

type mixMainLevelerLimitState struct {
	index int64
}

func (ep *mixMainLevelerLimit) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/leveler/limit",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainLevelerLimit) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/leveler/limit",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainMatrix struct {
	d      *HTTPDatastore
	Enable *mixMainMatrixEnable
	Mute   *mixMainMatrixMute
	Fader  *mixMainMatrixFader
	state  mixMainMatrixState
}

type mixMainMatrixState struct {
	index int64
}

type mixMainMatrixEnable struct {
	d     *HTTPDatastore
	state mixMainMatrixEnableState
}

type mixMainMatrixEnableState struct {
	index int64
}

func (ep *mixMainMatrixEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/matrix/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainMatrixEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/matrix/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainMatrixMute struct {
	d     *HTTPDatastore
	state mixMainMatrixMuteState
}

type mixMainMatrixMuteState struct {
	index int64
}

func (ep *mixMainMatrixMute) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/matrix/mute",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMainMatrixMute) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/matrix/mute",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMainMatrixFader struct {
	d     *HTTPDatastore
	state mixMainMatrixFaderState
}

type mixMainMatrixFaderState struct {
	index int64
}

func (ep *mixMainMatrixFader) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/main/%d/matrix/fader",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMainMatrixFader) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/main/%d/matrix/fader",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixAux struct {
	d      *HTTPDatastore
	Eq     *mixAuxEq
	Matrix *mixAuxMatrix
	state  mixAuxState
}

type mixAuxState struct {
	index int64
}

type mixAuxEq struct {
	d         *HTTPDatastore
	Highshelf *mixAuxEqHighshelf
	Mid1      *mixAuxEqMid1
	Mid2      *mixAuxEqMid2
	Lowshelf  *mixAuxEqLowshelf
	state     mixAuxEqState
}

type mixAuxEqState struct {
	index int64
}

type mixAuxEqHighshelf struct {
	d      *HTTPDatastore
	Enable *mixAuxEqHighshelfEnable
	Freq   *mixAuxEqHighshelfFreq
	Gain   *mixAuxEqHighshelfGain
	Bw     *mixAuxEqHighshelfBw
	Mode   *mixAuxEqHighshelfMode
	state  mixAuxEqHighshelfState
}

type mixAuxEqHighshelfState struct {
	index int64
}

type mixAuxEqHighshelfEnable struct {
	d     *HTTPDatastore
	state mixAuxEqHighshelfEnableState
}

type mixAuxEqHighshelfEnableState struct {
	index int64
}

func (ep *mixAuxEqHighshelfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/highshelf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxEqHighshelfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/highshelf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxEqHighshelfFreq struct {
	d     *HTTPDatastore
	state mixAuxEqHighshelfFreqState
}

type mixAuxEqHighshelfFreqState struct {
	index int64
}

func (ep *mixAuxEqHighshelfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/highshelf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxEqHighshelfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/highshelf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxEqHighshelfGain struct {
	d     *HTTPDatastore
	state mixAuxEqHighshelfGainState
}

type mixAuxEqHighshelfGainState struct {
	index int64
}

func (ep *mixAuxEqHighshelfGain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/highshelf/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixAuxEqHighshelfGain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/highshelf/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixAuxEqHighshelfBw struct {
	d     *HTTPDatastore
	state mixAuxEqHighshelfBwState
}

type mixAuxEqHighshelfBwState struct {
	index int64
}

func (ep *mixAuxEqHighshelfBw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/highshelf/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixAuxEqHighshelfBw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/highshelf/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixAuxEqHighshelfMode struct {
	d     *HTTPDatastore
	state mixAuxEqHighshelfModeState
}

type mixAuxEqHighshelfModeState struct {
	index int64
}

func (ep *mixAuxEqHighshelfMode) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/highshelf/mode",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxEqHighshelfMode) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/highshelf/mode",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxEqMid1 struct {
	d      *HTTPDatastore
	Enable *mixAuxEqMid1Enable
	Freq   *mixAuxEqMid1Freq
	Gain   *mixAuxEqMid1Gain
	Bw     *mixAuxEqMid1Bw
	state  mixAuxEqMid1State
}

type mixAuxEqMid1State struct {
	index int64
}

type mixAuxEqMid1Enable struct {
	d     *HTTPDatastore
	state mixAuxEqMid1EnableState
}

type mixAuxEqMid1EnableState struct {
	index int64
}

func (ep *mixAuxEqMid1Enable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid1/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxEqMid1Enable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid1/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxEqMid1Freq struct {
	d     *HTTPDatastore
	state mixAuxEqMid1FreqState
}

type mixAuxEqMid1FreqState struct {
	index int64
}

func (ep *mixAuxEqMid1Freq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid1/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxEqMid1Freq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid1/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxEqMid1Gain struct {
	d     *HTTPDatastore
	state mixAuxEqMid1GainState
}

type mixAuxEqMid1GainState struct {
	index int64
}

func (ep *mixAuxEqMid1Gain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid1/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixAuxEqMid1Gain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid1/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixAuxEqMid1Bw struct {
	d     *HTTPDatastore
	state mixAuxEqMid1BwState
}

type mixAuxEqMid1BwState struct {
	index int64
}

func (ep *mixAuxEqMid1Bw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid1/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixAuxEqMid1Bw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid1/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixAuxEqMid2 struct {
	d      *HTTPDatastore
	Enable *mixAuxEqMid2Enable
	Freq   *mixAuxEqMid2Freq
	Gain   *mixAuxEqMid2Gain
	Bw     *mixAuxEqMid2Bw
	state  mixAuxEqMid2State
}

type mixAuxEqMid2State struct {
	index int64
}

type mixAuxEqMid2Enable struct {
	d     *HTTPDatastore
	state mixAuxEqMid2EnableState
}

type mixAuxEqMid2EnableState struct {
	index int64
}

func (ep *mixAuxEqMid2Enable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid2/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxEqMid2Enable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid2/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxEqMid2Freq struct {
	d     *HTTPDatastore
	state mixAuxEqMid2FreqState
}

type mixAuxEqMid2FreqState struct {
	index int64
}

func (ep *mixAuxEqMid2Freq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid2/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxEqMid2Freq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid2/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxEqMid2Gain struct {
	d     *HTTPDatastore
	state mixAuxEqMid2GainState
}

type mixAuxEqMid2GainState struct {
	index int64
}

func (ep *mixAuxEqMid2Gain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid2/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixAuxEqMid2Gain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid2/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixAuxEqMid2Bw struct {
	d     *HTTPDatastore
	state mixAuxEqMid2BwState
}

type mixAuxEqMid2BwState struct {
	index int64
}

func (ep *mixAuxEqMid2Bw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid2/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixAuxEqMid2Bw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/mid2/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixAuxEqLowshelf struct {
	d      *HTTPDatastore
	Enable *mixAuxEqLowshelfEnable
	Freq   *mixAuxEqLowshelfFreq
	Gain   *mixAuxEqLowshelfGain
	Bw     *mixAuxEqLowshelfBw
	Mode   *mixAuxEqLowshelfMode
	state  mixAuxEqLowshelfState
}

type mixAuxEqLowshelfState struct {
	index int64
}

type mixAuxEqLowshelfEnable struct {
	d     *HTTPDatastore
	state mixAuxEqLowshelfEnableState
}

type mixAuxEqLowshelfEnableState struct {
	index int64
}

func (ep *mixAuxEqLowshelfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/lowshelf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxEqLowshelfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/lowshelf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxEqLowshelfFreq struct {
	d     *HTTPDatastore
	state mixAuxEqLowshelfFreqState
}

type mixAuxEqLowshelfFreqState struct {
	index int64
}

func (ep *mixAuxEqLowshelfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/lowshelf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxEqLowshelfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/lowshelf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxEqLowshelfGain struct {
	d     *HTTPDatastore
	state mixAuxEqLowshelfGainState
}

type mixAuxEqLowshelfGainState struct {
	index int64
}

func (ep *mixAuxEqLowshelfGain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/lowshelf/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixAuxEqLowshelfGain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/lowshelf/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixAuxEqLowshelfBw struct {
	d     *HTTPDatastore
	state mixAuxEqLowshelfBwState
}

type mixAuxEqLowshelfBwState struct {
	index int64
}

func (ep *mixAuxEqLowshelfBw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/lowshelf/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixAuxEqLowshelfBw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/lowshelf/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixAuxEqLowshelfMode struct {
	d     *HTTPDatastore
	state mixAuxEqLowshelfModeState
}

type mixAuxEqLowshelfModeState struct {
	index int64
}

func (ep *mixAuxEqLowshelfMode) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/lowshelf/mode",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxEqLowshelfMode) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/eq/lowshelf/mode",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxMatrix struct {
	d        *HTTPDatastore
	Enable   *mixAuxMatrixEnable
	Prefader *mixAuxMatrixPrefader
	Panner   *mixAuxMatrixPanner
	Mute     *mixAuxMatrixMute
	Fader    *mixAuxMatrixFader
	state    mixAuxMatrixState
}

type mixAuxMatrixState struct {
	index int64
}

type mixAuxMatrixEnable struct {
	d     *HTTPDatastore
	state mixAuxMatrixEnableState
}

type mixAuxMatrixEnableState struct {
	index int64
}

func (ep *mixAuxMatrixEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/matrix/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxMatrixEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/matrix/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxMatrixPrefader struct {
	d     *HTTPDatastore
	state mixAuxMatrixPrefaderState
}

type mixAuxMatrixPrefaderState struct {
	index int64
}

func (ep *mixAuxMatrixPrefader) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/matrix/prefader",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxMatrixPrefader) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/matrix/prefader",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxMatrixPanner struct {
	d     *HTTPDatastore
	state mixAuxMatrixPannerState
}

type mixAuxMatrixPannerState struct {
	index int64
}

func (ep *mixAuxMatrixPanner) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/matrix/panner",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxMatrixPanner) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/matrix/panner",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxMatrixMute struct {
	d     *HTTPDatastore
	state mixAuxMatrixMuteState
}

type mixAuxMatrixMuteState struct {
	index int64
}

func (ep *mixAuxMatrixMute) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/matrix/mute",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixAuxMatrixMute) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/matrix/mute",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixAuxMatrixFader struct {
	d     *HTTPDatastore
	state mixAuxMatrixFaderState
}

type mixAuxMatrixFaderState struct {
	index int64
}

func (ep *mixAuxMatrixFader) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/aux/%d/matrix/fader",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixAuxMatrixFader) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/aux/%d/matrix/fader",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroup struct {
	d       *HTTPDatastore
	Matrix  *mixGroupMatrix
	Eq      *mixGroupEq
	Leveler *mixGroupLeveler
	state   mixGroupState
}

type mixGroupState struct {
	index int64
}

type mixGroupMatrix struct {
	d        *HTTPDatastore
	Enable   *mixGroupMatrixEnable
	Solo     *mixGroupMatrixSolo
	Prefader *mixGroupMatrixPrefader
	Panner   *mixGroupMatrixPanner
	Mute     *mixGroupMatrixMute
	Fader    *mixGroupMatrixFader
	state    mixGroupMatrixState
}

type mixGroupMatrixState struct {
	index int64
}

func (mixGroupMatrix *mixGroupMatrix) Aux(index int64) *mixGroupMatrixAux {
	return &mixGroupMatrixAux{
		state: mixGroupMatrixAuxState{
			index: mixGroupMatrix.state.index,
			index: index,
		},
		device: mixGroupMatrix.device,
		Send: &mixGroupMatrixAuxSend{
			device: mixGroupMatrix.device,
			state: mixGroupMatrixAuxSendState{
				index: index,
			}},
	}
}

func (mixGroupMatrix *mixGroupMatrix) Reverb(index int64) *mixGroupMatrixReverb {
	return &mixGroupMatrixReverb{
		state: mixGroupMatrixReverbState{
			index: mixGroupMatrix.state.index,
			index: index,
		},
		device: mixGroupMatrix.device,
		Send: &mixGroupMatrixReverbSend{
			device: mixGroupMatrix.device,
			state: mixGroupMatrixReverbSendState{
				index: index,
			}},
	}
}

type mixGroupMatrixAux struct {
	d     *HTTPDatastore
	Send  *mixGroupMatrixAuxSend
	state mixGroupMatrixAuxState
}

type mixGroupMatrixAuxState struct {
	index int64
	index int64
}

type mixGroupMatrixAuxSend struct {
	d     *HTTPDatastore
	state mixGroupMatrixAuxSendState
}

type mixGroupMatrixAuxSendState struct {
	index int64
	index int64
}

func (ep *mixGroupMatrixAuxSend) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/aux/%d/send",
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupMatrixAuxSend) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/aux/%d/send",
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupMatrixReverb struct {
	d     *HTTPDatastore
	Send  *mixGroupMatrixReverbSend
	state mixGroupMatrixReverbState
}

type mixGroupMatrixReverbState struct {
	index int64
	index int64
}

type mixGroupMatrixReverbSend struct {
	d     *HTTPDatastore
	state mixGroupMatrixReverbSendState
}

type mixGroupMatrixReverbSendState struct {
	index int64
	index int64
}

func (ep *mixGroupMatrixReverbSend) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/reverb/%d/send",
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupMatrixReverbSend) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/reverb/%d/send",
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupMatrixEnable struct {
	d     *HTTPDatastore
	state mixGroupMatrixEnableState
}

type mixGroupMatrixEnableState struct {
	index int64
}

func (ep *mixGroupMatrixEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupMatrixEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupMatrixSolo struct {
	d     *HTTPDatastore
	state mixGroupMatrixSoloState
}

type mixGroupMatrixSoloState struct {
	index int64
}

func (ep *mixGroupMatrixSolo) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/solo",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupMatrixSolo) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/solo",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupMatrixPrefader struct {
	d     *HTTPDatastore
	state mixGroupMatrixPrefaderState
}

type mixGroupMatrixPrefaderState struct {
	index int64
}

func (ep *mixGroupMatrixPrefader) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/prefader",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupMatrixPrefader) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/prefader",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupMatrixPanner struct {
	d     *HTTPDatastore
	state mixGroupMatrixPannerState
}

type mixGroupMatrixPannerState struct {
	index int64
}

func (ep *mixGroupMatrixPanner) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/panner",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupMatrixPanner) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/panner",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupMatrixMute struct {
	d     *HTTPDatastore
	state mixGroupMatrixMuteState
}

type mixGroupMatrixMuteState struct {
	index int64
}

func (ep *mixGroupMatrixMute) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/mute",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupMatrixMute) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/mute",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupMatrixFader struct {
	d     *HTTPDatastore
	state mixGroupMatrixFaderState
}

type mixGroupMatrixFaderState struct {
	index int64
}

func (ep *mixGroupMatrixFader) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/fader",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupMatrixFader) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/matrix/fader",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupEq struct {
	d         *HTTPDatastore
	Highshelf *mixGroupEqHighshelf
	Mid1      *mixGroupEqMid1
	Mid2      *mixGroupEqMid2
	Lowshelf  *mixGroupEqLowshelf
	state     mixGroupEqState
}

type mixGroupEqState struct {
	index int64
}

type mixGroupEqHighshelf struct {
	d      *HTTPDatastore
	Enable *mixGroupEqHighshelfEnable
	Freq   *mixGroupEqHighshelfFreq
	Gain   *mixGroupEqHighshelfGain
	Bw     *mixGroupEqHighshelfBw
	Mode   *mixGroupEqHighshelfMode
	state  mixGroupEqHighshelfState
}

type mixGroupEqHighshelfState struct {
	index int64
}

type mixGroupEqHighshelfEnable struct {
	d     *HTTPDatastore
	state mixGroupEqHighshelfEnableState
}

type mixGroupEqHighshelfEnableState struct {
	index int64
}

func (ep *mixGroupEqHighshelfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/highshelf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupEqHighshelfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/highshelf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupEqHighshelfFreq struct {
	d     *HTTPDatastore
	state mixGroupEqHighshelfFreqState
}

type mixGroupEqHighshelfFreqState struct {
	index int64
}

func (ep *mixGroupEqHighshelfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/highshelf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupEqHighshelfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/highshelf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupEqHighshelfGain struct {
	d     *HTTPDatastore
	state mixGroupEqHighshelfGainState
}

type mixGroupEqHighshelfGainState struct {
	index int64
}

func (ep *mixGroupEqHighshelfGain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/highshelf/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupEqHighshelfGain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/highshelf/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupEqHighshelfBw struct {
	d     *HTTPDatastore
	state mixGroupEqHighshelfBwState
}

type mixGroupEqHighshelfBwState struct {
	index int64
}

func (ep *mixGroupEqHighshelfBw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/highshelf/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupEqHighshelfBw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/highshelf/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupEqHighshelfMode struct {
	d     *HTTPDatastore
	state mixGroupEqHighshelfModeState
}

type mixGroupEqHighshelfModeState struct {
	index int64
}

func (ep *mixGroupEqHighshelfMode) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/highshelf/mode",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupEqHighshelfMode) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/highshelf/mode",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupEqMid1 struct {
	d      *HTTPDatastore
	Enable *mixGroupEqMid1Enable
	Freq   *mixGroupEqMid1Freq
	Gain   *mixGroupEqMid1Gain
	Bw     *mixGroupEqMid1Bw
	state  mixGroupEqMid1State
}

type mixGroupEqMid1State struct {
	index int64
}

type mixGroupEqMid1Enable struct {
	d     *HTTPDatastore
	state mixGroupEqMid1EnableState
}

type mixGroupEqMid1EnableState struct {
	index int64
}

func (ep *mixGroupEqMid1Enable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid1/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupEqMid1Enable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid1/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupEqMid1Freq struct {
	d     *HTTPDatastore
	state mixGroupEqMid1FreqState
}

type mixGroupEqMid1FreqState struct {
	index int64
}

func (ep *mixGroupEqMid1Freq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid1/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupEqMid1Freq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid1/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupEqMid1Gain struct {
	d     *HTTPDatastore
	state mixGroupEqMid1GainState
}

type mixGroupEqMid1GainState struct {
	index int64
}

func (ep *mixGroupEqMid1Gain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid1/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupEqMid1Gain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid1/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupEqMid1Bw struct {
	d     *HTTPDatastore
	state mixGroupEqMid1BwState
}

type mixGroupEqMid1BwState struct {
	index int64
}

func (ep *mixGroupEqMid1Bw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid1/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupEqMid1Bw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid1/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupEqMid2 struct {
	d      *HTTPDatastore
	Enable *mixGroupEqMid2Enable
	Freq   *mixGroupEqMid2Freq
	Gain   *mixGroupEqMid2Gain
	Bw     *mixGroupEqMid2Bw
	state  mixGroupEqMid2State
}

type mixGroupEqMid2State struct {
	index int64
}

type mixGroupEqMid2Enable struct {
	d     *HTTPDatastore
	state mixGroupEqMid2EnableState
}

type mixGroupEqMid2EnableState struct {
	index int64
}

func (ep *mixGroupEqMid2Enable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid2/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupEqMid2Enable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid2/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupEqMid2Freq struct {
	d     *HTTPDatastore
	state mixGroupEqMid2FreqState
}

type mixGroupEqMid2FreqState struct {
	index int64
}

func (ep *mixGroupEqMid2Freq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid2/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupEqMid2Freq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid2/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupEqMid2Gain struct {
	d     *HTTPDatastore
	state mixGroupEqMid2GainState
}

type mixGroupEqMid2GainState struct {
	index int64
}

func (ep *mixGroupEqMid2Gain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid2/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupEqMid2Gain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid2/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupEqMid2Bw struct {
	d     *HTTPDatastore
	state mixGroupEqMid2BwState
}

type mixGroupEqMid2BwState struct {
	index int64
}

func (ep *mixGroupEqMid2Bw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid2/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupEqMid2Bw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/mid2/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupEqLowshelf struct {
	d      *HTTPDatastore
	Enable *mixGroupEqLowshelfEnable
	Freq   *mixGroupEqLowshelfFreq
	Gain   *mixGroupEqLowshelfGain
	Bw     *mixGroupEqLowshelfBw
	Mode   *mixGroupEqLowshelfMode
	state  mixGroupEqLowshelfState
}

type mixGroupEqLowshelfState struct {
	index int64
}

type mixGroupEqLowshelfEnable struct {
	d     *HTTPDatastore
	state mixGroupEqLowshelfEnableState
}

type mixGroupEqLowshelfEnableState struct {
	index int64
}

func (ep *mixGroupEqLowshelfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/lowshelf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupEqLowshelfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/lowshelf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupEqLowshelfFreq struct {
	d     *HTTPDatastore
	state mixGroupEqLowshelfFreqState
}

type mixGroupEqLowshelfFreqState struct {
	index int64
}

func (ep *mixGroupEqLowshelfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/lowshelf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupEqLowshelfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/lowshelf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupEqLowshelfGain struct {
	d     *HTTPDatastore
	state mixGroupEqLowshelfGainState
}

type mixGroupEqLowshelfGainState struct {
	index int64
}

func (ep *mixGroupEqLowshelfGain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/lowshelf/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupEqLowshelfGain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/lowshelf/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupEqLowshelfBw struct {
	d     *HTTPDatastore
	state mixGroupEqLowshelfBwState
}

type mixGroupEqLowshelfBwState struct {
	index int64
}

func (ep *mixGroupEqLowshelfBw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/lowshelf/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupEqLowshelfBw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/lowshelf/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupEqLowshelfMode struct {
	d     *HTTPDatastore
	state mixGroupEqLowshelfModeState
}

type mixGroupEqLowshelfModeState struct {
	index int64
}

func (ep *mixGroupEqLowshelfMode) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/lowshelf/mode",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupEqLowshelfMode) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/eq/lowshelf/mode",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupLeveler struct {
	d         *HTTPDatastore
	Enable    *mixGroupLevelerEnable
	Makeup    *mixGroupLevelerMakeup
	Reduction *mixGroupLevelerReduction
	Limit     *mixGroupLevelerLimit
	state     mixGroupLevelerState
}

type mixGroupLevelerState struct {
	index int64
}

type mixGroupLevelerEnable struct {
	d     *HTTPDatastore
	state mixGroupLevelerEnableState
}

type mixGroupLevelerEnableState struct {
	index int64
}

func (ep *mixGroupLevelerEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/leveler/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupLevelerEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/leveler/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixGroupLevelerMakeup struct {
	d     *HTTPDatastore
	state mixGroupLevelerMakeupState
}

type mixGroupLevelerMakeupState struct {
	index int64
}

func (ep *mixGroupLevelerMakeup) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/leveler/makeup",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupLevelerMakeup) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/leveler/makeup",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupLevelerReduction struct {
	d     *HTTPDatastore
	state mixGroupLevelerReductionState
}

type mixGroupLevelerReductionState struct {
	index int64
}

func (ep *mixGroupLevelerReduction) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/leveler/reduction",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixGroupLevelerReduction) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/leveler/reduction",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixGroupLevelerLimit struct {
	d     *HTTPDatastore
	state mixGroupLevelerLimitState
}

type mixGroupLevelerLimitState struct {
	index int64
}

func (ep *mixGroupLevelerLimit) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/group/%d/leveler/limit",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixGroupLevelerLimit) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/group/%d/leveler/limit",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverb struct {
	d       *HTTPDatastore
	Matrix  *mixReverbMatrix
	Eq      *mixReverbEq
	Leveler *mixReverbLeveler
	Reverb  *mixReverbReverb
	state   mixReverbState
}

type mixReverbState struct {
	index int64
}

type mixReverbMatrix struct {
	d        *HTTPDatastore
	Enable   *mixReverbMatrixEnable
	Solo     *mixReverbMatrixSolo
	Prefader *mixReverbMatrixPrefader
	Panner   *mixReverbMatrixPanner
	Mute     *mixReverbMatrixMute
	Fader    *mixReverbMatrixFader
	state    mixReverbMatrixState
}

type mixReverbMatrixState struct {
	index int64
}

func (mixReverbMatrix *mixReverbMatrix) Aux(index int64) *mixReverbMatrixAux {
	return &mixReverbMatrixAux{
		state: mixReverbMatrixAuxState{
			index: mixReverbMatrix.state.index,
			index: index,
		},
		device: mixReverbMatrix.device,
		Send: &mixReverbMatrixAuxSend{
			device: mixReverbMatrix.device,
			state: mixReverbMatrixAuxSendState{
				index: index,
			}},
	}
}

func (mixReverbMatrix *mixReverbMatrix) Reverb(index int64) *mixReverbMatrixReverb {
	return &mixReverbMatrixReverb{
		state: mixReverbMatrixReverbState{
			index: mixReverbMatrix.state.index,
			index: index,
		},
		device: mixReverbMatrix.device,
		Send: &mixReverbMatrixReverbSend{
			device: mixReverbMatrix.device,
			state: mixReverbMatrixReverbSendState{
				index: index,
			}},
	}
}

type mixReverbMatrixAux struct {
	d     *HTTPDatastore
	Send  *mixReverbMatrixAuxSend
	state mixReverbMatrixAuxState
}

type mixReverbMatrixAuxState struct {
	index int64
	index int64
}

type mixReverbMatrixAuxSend struct {
	d     *HTTPDatastore
	state mixReverbMatrixAuxSendState
}

type mixReverbMatrixAuxSendState struct {
	index int64
	index int64
}

func (ep *mixReverbMatrixAuxSend) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/aux/%d/send",
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbMatrixAuxSend) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/aux/%d/send",
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbMatrixReverb struct {
	d     *HTTPDatastore
	Send  *mixReverbMatrixReverbSend
	state mixReverbMatrixReverbState
}

type mixReverbMatrixReverbState struct {
	index int64
	index int64
}

type mixReverbMatrixReverbSend struct {
	d     *HTTPDatastore
	state mixReverbMatrixReverbSendState
}

type mixReverbMatrixReverbSendState struct {
	index int64
	index int64
}

func (ep *mixReverbMatrixReverbSend) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/reverb/%d/send",
		ep.state.index,
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbMatrixReverbSend) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/reverb/%d/send",
		ep.state.index,
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbMatrixEnable struct {
	d     *HTTPDatastore
	state mixReverbMatrixEnableState
}

type mixReverbMatrixEnableState struct {
	index int64
}

func (ep *mixReverbMatrixEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbMatrixEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbMatrixSolo struct {
	d     *HTTPDatastore
	state mixReverbMatrixSoloState
}

type mixReverbMatrixSoloState struct {
	index int64
}

func (ep *mixReverbMatrixSolo) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/solo",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbMatrixSolo) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/solo",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbMatrixPrefader struct {
	d     *HTTPDatastore
	state mixReverbMatrixPrefaderState
}

type mixReverbMatrixPrefaderState struct {
	index int64
}

func (ep *mixReverbMatrixPrefader) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/prefader",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbMatrixPrefader) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/prefader",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbMatrixPanner struct {
	d     *HTTPDatastore
	state mixReverbMatrixPannerState
}

type mixReverbMatrixPannerState struct {
	index int64
}

func (ep *mixReverbMatrixPanner) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/panner",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbMatrixPanner) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/panner",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbMatrixMute struct {
	d     *HTTPDatastore
	state mixReverbMatrixMuteState
}

type mixReverbMatrixMuteState struct {
	index int64
}

func (ep *mixReverbMatrixMute) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/mute",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbMatrixMute) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/mute",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbMatrixFader struct {
	d     *HTTPDatastore
	state mixReverbMatrixFaderState
}

type mixReverbMatrixFaderState struct {
	index int64
}

func (ep *mixReverbMatrixFader) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/fader",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbMatrixFader) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/matrix/fader",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbEq struct {
	d         *HTTPDatastore
	Highshelf *mixReverbEqHighshelf
	Mid1      *mixReverbEqMid1
	Mid2      *mixReverbEqMid2
	Lowshelf  *mixReverbEqLowshelf
	state     mixReverbEqState
}

type mixReverbEqState struct {
	index int64
}

type mixReverbEqHighshelf struct {
	d      *HTTPDatastore
	Enable *mixReverbEqHighshelfEnable
	Freq   *mixReverbEqHighshelfFreq
	Gain   *mixReverbEqHighshelfGain
	Bw     *mixReverbEqHighshelfBw
	Mode   *mixReverbEqHighshelfMode
	state  mixReverbEqHighshelfState
}

type mixReverbEqHighshelfState struct {
	index int64
}

type mixReverbEqHighshelfEnable struct {
	d     *HTTPDatastore
	state mixReverbEqHighshelfEnableState
}

type mixReverbEqHighshelfEnableState struct {
	index int64
}

func (ep *mixReverbEqHighshelfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/highshelf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbEqHighshelfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/highshelf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbEqHighshelfFreq struct {
	d     *HTTPDatastore
	state mixReverbEqHighshelfFreqState
}

type mixReverbEqHighshelfFreqState struct {
	index int64
}

func (ep *mixReverbEqHighshelfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/highshelf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbEqHighshelfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/highshelf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbEqHighshelfGain struct {
	d     *HTTPDatastore
	state mixReverbEqHighshelfGainState
}

type mixReverbEqHighshelfGainState struct {
	index int64
}

func (ep *mixReverbEqHighshelfGain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/highshelf/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbEqHighshelfGain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/highshelf/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbEqHighshelfBw struct {
	d     *HTTPDatastore
	state mixReverbEqHighshelfBwState
}

type mixReverbEqHighshelfBwState struct {
	index int64
}

func (ep *mixReverbEqHighshelfBw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/highshelf/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbEqHighshelfBw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/highshelf/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbEqHighshelfMode struct {
	d     *HTTPDatastore
	state mixReverbEqHighshelfModeState
}

type mixReverbEqHighshelfModeState struct {
	index int64
}

func (ep *mixReverbEqHighshelfMode) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/highshelf/mode",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbEqHighshelfMode) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/highshelf/mode",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbEqMid1 struct {
	d      *HTTPDatastore
	Enable *mixReverbEqMid1Enable
	Freq   *mixReverbEqMid1Freq
	Gain   *mixReverbEqMid1Gain
	Bw     *mixReverbEqMid1Bw
	state  mixReverbEqMid1State
}

type mixReverbEqMid1State struct {
	index int64
}

type mixReverbEqMid1Enable struct {
	d     *HTTPDatastore
	state mixReverbEqMid1EnableState
}

type mixReverbEqMid1EnableState struct {
	index int64
}

func (ep *mixReverbEqMid1Enable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid1/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbEqMid1Enable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid1/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbEqMid1Freq struct {
	d     *HTTPDatastore
	state mixReverbEqMid1FreqState
}

type mixReverbEqMid1FreqState struct {
	index int64
}

func (ep *mixReverbEqMid1Freq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid1/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbEqMid1Freq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid1/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbEqMid1Gain struct {
	d     *HTTPDatastore
	state mixReverbEqMid1GainState
}

type mixReverbEqMid1GainState struct {
	index int64
}

func (ep *mixReverbEqMid1Gain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid1/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbEqMid1Gain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid1/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbEqMid1Bw struct {
	d     *HTTPDatastore
	state mixReverbEqMid1BwState
}

type mixReverbEqMid1BwState struct {
	index int64
}

func (ep *mixReverbEqMid1Bw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid1/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbEqMid1Bw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid1/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbEqMid2 struct {
	d      *HTTPDatastore
	Enable *mixReverbEqMid2Enable
	Freq   *mixReverbEqMid2Freq
	Gain   *mixReverbEqMid2Gain
	Bw     *mixReverbEqMid2Bw
	state  mixReverbEqMid2State
}

type mixReverbEqMid2State struct {
	index int64
}

type mixReverbEqMid2Enable struct {
	d     *HTTPDatastore
	state mixReverbEqMid2EnableState
}

type mixReverbEqMid2EnableState struct {
	index int64
}

func (ep *mixReverbEqMid2Enable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid2/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbEqMid2Enable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid2/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbEqMid2Freq struct {
	d     *HTTPDatastore
	state mixReverbEqMid2FreqState
}

type mixReverbEqMid2FreqState struct {
	index int64
}

func (ep *mixReverbEqMid2Freq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid2/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbEqMid2Freq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid2/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbEqMid2Gain struct {
	d     *HTTPDatastore
	state mixReverbEqMid2GainState
}

type mixReverbEqMid2GainState struct {
	index int64
}

func (ep *mixReverbEqMid2Gain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid2/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbEqMid2Gain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid2/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbEqMid2Bw struct {
	d     *HTTPDatastore
	state mixReverbEqMid2BwState
}

type mixReverbEqMid2BwState struct {
	index int64
}

func (ep *mixReverbEqMid2Bw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid2/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbEqMid2Bw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/mid2/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbEqLowshelf struct {
	d      *HTTPDatastore
	Enable *mixReverbEqLowshelfEnable
	Freq   *mixReverbEqLowshelfFreq
	Gain   *mixReverbEqLowshelfGain
	Bw     *mixReverbEqLowshelfBw
	Mode   *mixReverbEqLowshelfMode
	state  mixReverbEqLowshelfState
}

type mixReverbEqLowshelfState struct {
	index int64
}

type mixReverbEqLowshelfEnable struct {
	d     *HTTPDatastore
	state mixReverbEqLowshelfEnableState
}

type mixReverbEqLowshelfEnableState struct {
	index int64
}

func (ep *mixReverbEqLowshelfEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/lowshelf/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbEqLowshelfEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/lowshelf/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbEqLowshelfFreq struct {
	d     *HTTPDatastore
	state mixReverbEqLowshelfFreqState
}

type mixReverbEqLowshelfFreqState struct {
	index int64
}

func (ep *mixReverbEqLowshelfFreq) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/lowshelf/freq",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbEqLowshelfFreq) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/lowshelf/freq",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbEqLowshelfGain struct {
	d     *HTTPDatastore
	state mixReverbEqLowshelfGainState
}

type mixReverbEqLowshelfGainState struct {
	index int64
}

func (ep *mixReverbEqLowshelfGain) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/lowshelf/gain",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbEqLowshelfGain) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/lowshelf/gain",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbEqLowshelfBw struct {
	d     *HTTPDatastore
	state mixReverbEqLowshelfBwState
}

type mixReverbEqLowshelfBwState struct {
	index int64
}

func (ep *mixReverbEqLowshelfBw) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/lowshelf/bw",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbEqLowshelfBw) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/lowshelf/bw",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbEqLowshelfMode struct {
	d     *HTTPDatastore
	state mixReverbEqLowshelfModeState
}

type mixReverbEqLowshelfModeState struct {
	index int64
}

func (ep *mixReverbEqLowshelfMode) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/lowshelf/mode",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbEqLowshelfMode) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/eq/lowshelf/mode",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbLeveler struct {
	d         *HTTPDatastore
	Enable    *mixReverbLevelerEnable
	Makeup    *mixReverbLevelerMakeup
	Reduction *mixReverbLevelerReduction
	Limit     *mixReverbLevelerLimit
	state     mixReverbLevelerState
}

type mixReverbLevelerState struct {
	index int64
}

type mixReverbLevelerEnable struct {
	d     *HTTPDatastore
	state mixReverbLevelerEnableState
}

type mixReverbLevelerEnableState struct {
	index int64
}

func (ep *mixReverbLevelerEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/leveler/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbLevelerEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/leveler/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbLevelerMakeup struct {
	d     *HTTPDatastore
	state mixReverbLevelerMakeupState
}

type mixReverbLevelerMakeupState struct {
	index int64
}

func (ep *mixReverbLevelerMakeup) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/leveler/makeup",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbLevelerMakeup) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/leveler/makeup",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbLevelerReduction struct {
	d     *HTTPDatastore
	state mixReverbLevelerReductionState
}

type mixReverbLevelerReductionState struct {
	index int64
}

func (ep *mixReverbLevelerReduction) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/leveler/reduction",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixReverbLevelerReduction) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/leveler/reduction",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixReverbLevelerLimit struct {
	d     *HTTPDatastore
	state mixReverbLevelerLimitState
}

type mixReverbLevelerLimitState struct {
	index int64
}

func (ep *mixReverbLevelerLimit) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/leveler/limit",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbLevelerLimit) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/leveler/limit",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbReverb struct {
	d          *HTTPDatastore
	Enable     *mixReverbReverbEnable
	Reverbtime *mixReverbReverbReverbtime
	Hf         *mixReverbReverbHf
	Mf         *mixReverbReverbMf
	Predelay   *mixReverbReverbPredelay
	Mfratio    *mixReverbReverbMfratio
	Hfratio    *mixReverbReverbHfratio
	Tailspread *mixReverbReverbTailspread
	Mod        *mixReverbReverbMod
	state      mixReverbReverbState
}

type mixReverbReverbState struct {
	index int64
}

type mixReverbReverbEnable struct {
	d     *HTTPDatastore
	state mixReverbReverbEnableState
}

type mixReverbReverbEnableState struct {
	index int64
}

func (ep *mixReverbReverbEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbReverbEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbReverbReverbtime struct {
	d     *HTTPDatastore
	state mixReverbReverbReverbtimeState
}

type mixReverbReverbReverbtimeState struct {
	index int64
}

func (ep *mixReverbReverbReverbtime) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/reverbtime",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbReverbReverbtime) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/reverbtime",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbReverbHf struct {
	d     *HTTPDatastore
	state mixReverbReverbHfState
}

type mixReverbReverbHfState struct {
	index int64
}

func (ep *mixReverbReverbHf) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/hf",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbReverbHf) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/hf",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbReverbMf struct {
	d     *HTTPDatastore
	state mixReverbReverbMfState
}

type mixReverbReverbMfState struct {
	index int64
}

func (ep *mixReverbReverbMf) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/mf",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbReverbMf) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/mf",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbReverbPredelay struct {
	d     *HTTPDatastore
	state mixReverbReverbPredelayState
}

type mixReverbReverbPredelayState struct {
	index int64
}

func (ep *mixReverbReverbPredelay) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/predelay",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbReverbPredelay) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/predelay",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbReverbMfratio struct {
	d     *HTTPDatastore
	state mixReverbReverbMfratioState
}

type mixReverbReverbMfratioState struct {
	index int64
}

func (ep *mixReverbReverbMfratio) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/mfratio",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbReverbMfratio) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/mfratio",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbReverbHfratio struct {
	d     *HTTPDatastore
	state mixReverbReverbHfratioState
}

type mixReverbReverbHfratioState struct {
	index int64
}

func (ep *mixReverbReverbHfratio) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/hfratio",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbReverbHfratio) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/hfratio",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbReverbTailspread struct {
	d     *HTTPDatastore
	state mixReverbReverbTailspreadState
}

type mixReverbReverbTailspreadState struct {
	index int64
}

func (ep *mixReverbReverbTailspread) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/tailspread",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbReverbTailspread) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/tailspread",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixReverbReverbMod struct {
	d     *HTTPDatastore
	state mixReverbReverbModState
}

type mixReverbReverbModState struct {
	index int64
}

func (ep *mixReverbReverbMod) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/mod",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixReverbReverbMod) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/reverb/%d/reverb/mod",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMonitor struct {
	d        *HTTPDatastore
	Matrix   *mixMonitorMatrix
	Assign   *mixMonitorAssign
	Override *mixMonitorOverride
	Auto     *mixMonitorAuto
	state    mixMonitorState
}

type mixMonitorState struct {
	index int64
}

type mixMonitorMatrix struct {
	d      *HTTPDatastore
	Enable *mixMonitorMatrixEnable
	Mute   *mixMonitorMatrixMute
	Fader  *mixMonitorMatrixFader
	state  mixMonitorMatrixState
}

type mixMonitorMatrixState struct {
	index int64
}

type mixMonitorMatrixEnable struct {
	d     *HTTPDatastore
	state mixMonitorMatrixEnableState
}

type mixMonitorMatrixEnableState struct {
	index int64
}

func (ep *mixMonitorMatrixEnable) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/matrix/enable",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMonitorMatrixEnable) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/matrix/enable",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMonitorMatrixMute struct {
	d     *HTTPDatastore
	state mixMonitorMatrixMuteState
}

type mixMonitorMatrixMuteState struct {
	index int64
}

func (ep *mixMonitorMatrixMute) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/matrix/mute",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMonitorMatrixMute) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/matrix/mute",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMonitorMatrixFader struct {
	d     *HTTPDatastore
	state mixMonitorMatrixFaderState
}

type mixMonitorMatrixFaderState struct {
	index int64
}

func (ep *mixMonitorMatrixFader) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/matrix/fader",
		ep.state.index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *mixMonitorMatrixFader) Set(val float64) error {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/matrix/fader",
		ep.state.index,
	)

	return ep.device.SetFloat(addr, val)
}

type mixMonitorAssign struct {
	d     *HTTPDatastore
	state mixMonitorAssignState
}

type mixMonitorAssignState struct {
	index int64
}

func (ep *mixMonitorAssign) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/assign",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMonitorAssign) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/assign",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMonitorOverride struct {
	d     *HTTPDatastore
	state mixMonitorOverrideState
}

type mixMonitorOverrideState struct {
	index int64
}

func (ep *mixMonitorOverride) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/override",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMonitorOverride) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/override",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}

type mixMonitorAuto struct {
	d     *HTTPDatastore
	state mixMonitorAutoState
}

type mixMonitorAutoState struct {
	index int64
}

func (ep *mixMonitorAuto) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/auto",
		ep.state.index,
	)

	ep.device.BindInt(addr, callback)
}

func (ep *mixMonitorAuto) Set(val int64) error {
	addr := fmt.Sprintf(
		"/mix/monitor/%d/auto",
		ep.state.index,
	)

	return ep.device.SetInt(addr, val)
}
