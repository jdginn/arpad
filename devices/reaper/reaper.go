// Code generated by reaperarpadoscgen. DO NOT EDIT.

package reaper

import (
	"fmt"

	"github.com/jdginn/arpad/devices"
)

type Reaper struct {
	device *devices.OscDevice
}

func NewReaper(dev *devices.OscDevice) *Reaper {
	return &Reaper{
		device: dev,
	}
}

func (ep *Reaper) OscDispatcher() devices.Dispatcher {
	return ep.device.Dispatcher
}

func (ep *Reaper) Run() {
	ep.device.Run()
}

func (reaper *Reaper) Track(track_guid string) *track {
	return &track{
		state: trackState{
			track_guid: track_guid,
		},
		device: reaper.device,
		Index: &trackIndex{
			device: reaper.device,
			state: trackIndexState{
				track_guid: track_guid,
			}},
		Name: &trackName{
			device: reaper.device,
			state: trackNameState{
				track_guid: track_guid,
			}},
		Selected: &trackSelected{
			device: reaper.device,
			state: trackSelectedState{
				track_guid: track_guid,
			}},
		Volume: &trackVolume{
			device: reaper.device,
			state: trackVolumeState{
				track_guid: track_guid,
			}},
		Pan: &trackPan{
			device: reaper.device,
			state: trackPanState{
				track_guid: track_guid,
			}},
		Mute: &trackMute{
			device: reaper.device,
			state: trackMuteState{
				track_guid: track_guid,
			}},
		Solo: &trackSolo{
			device: reaper.device,
			state: trackSoloState{
				track_guid: track_guid,
			}},
		Recarm: &trackRecarm{
			device: reaper.device,
			state: trackRecarmState{
				track_guid: track_guid,
			}},
	}
}

type track struct {
	device   *devices.OscDevice
	Index    *trackIndex
	Name     *trackName
	Selected *trackSelected
	Volume   *trackVolume
	Pan      *trackPan
	Mute     *trackMute
	Solo     *trackSolo
	Recarm   *trackRecarm
	state    trackState
}

type trackState struct {
	track_guid string
}

func (track *track) Send(send_index int64) *trackSend {
	return &trackSend{
		state: trackSendState{
			track_guid: track.state.track_guid,
			send_index: send_index,
		},
		device: track.device,
		Guid: &trackSendGuid{
			device: track.device,
			state: trackSendGuidState{
				send_index: send_index,
			}},
		Volume: &trackSendVolume{
			device: track.device,
			state: trackSendVolumeState{
				send_index: send_index,
			}},
		Pan: &trackSendPan{
			device: track.device,
			state: trackSendPanState{
				send_index: send_index,
			}},
	}
}

type trackIndex struct {
	device *devices.OscDevice
	state  trackIndexState
}

type trackIndexState struct {
	track_guid string
}

func (ep *trackIndex) Bind(callback func(int64) error) {
	addr := fmt.Sprintf(
		"/track/%d/index",
		ep.state.track_guid,
	)

	ep.device.BindInt(addr, callback)
}

type trackName struct {
	device *devices.OscDevice
	state  trackNameState
}

type trackNameState struct {
	track_guid string
}

func (ep *trackName) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/track/%d/name",
		ep.state.track_guid,
	)

	ep.device.BindString(addr, callback)
}

func (ep *trackName) Set(val string) error {
	addr := fmt.Sprintf(
		"/track/%d/name",
		ep.state.track_guid,
	)

	return ep.device.SetString(addr, val)
}

type trackSelected struct {
	device *devices.OscDevice
	state  trackSelectedState
}

type trackSelectedState struct {
	track_guid string
}

func (ep *trackSelected) Bind(callback func(bool) error) {
	addr := fmt.Sprintf(
		"/track/%d/selected",
		ep.state.track_guid,
	)

	ep.device.BindBool(addr, callback)
}

func (ep *trackSelected) Set(val bool) error {
	addr := fmt.Sprintf(
		"/track/%d/selected",
		ep.state.track_guid,
	)

	return ep.device.SetBool(addr, val)
}

type trackVolume struct {
	device *devices.OscDevice
	state  trackVolumeState
}

type trackVolumeState struct {
	track_guid string
}

func (ep *trackVolume) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/track/%d/volume",
		ep.state.track_guid,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *trackVolume) Set(val float64) error {
	addr := fmt.Sprintf(
		"/track/%d/volume",
		ep.state.track_guid,
	)

	return ep.device.SetFloat(addr, val)
}

type trackPan struct {
	device *devices.OscDevice
	state  trackPanState
}

type trackPanState struct {
	track_guid string
}

func (ep *trackPan) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/track/%d/pan",
		ep.state.track_guid,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *trackPan) Set(val float64) error {
	addr := fmt.Sprintf(
		"/track/%d/pan",
		ep.state.track_guid,
	)

	return ep.device.SetFloat(addr, val)
}

type trackMute struct {
	device *devices.OscDevice
	state  trackMuteState
}

type trackMuteState struct {
	track_guid string
}

func (ep *trackMute) Bind(callback func(bool) error) {
	addr := fmt.Sprintf(
		"/track/%d/mute",
		ep.state.track_guid,
	)

	ep.device.BindBool(addr, callback)
}

func (ep *trackMute) Set(val bool) error {
	addr := fmt.Sprintf(
		"/track/%d/mute",
		ep.state.track_guid,
	)

	return ep.device.SetBool(addr, val)
}

type trackSolo struct {
	device *devices.OscDevice
	state  trackSoloState
}

type trackSoloState struct {
	track_guid string
}

func (ep *trackSolo) Bind(callback func(bool) error) {
	addr := fmt.Sprintf(
		"/track/%d/solo",
		ep.state.track_guid,
	)

	ep.device.BindBool(addr, callback)
}

func (ep *trackSolo) Set(val bool) error {
	addr := fmt.Sprintf(
		"/track/%d/solo",
		ep.state.track_guid,
	)

	return ep.device.SetBool(addr, val)
}

type trackRecarm struct {
	device *devices.OscDevice
	state  trackRecarmState
}

type trackRecarmState struct {
	track_guid string
}

func (ep *trackRecarm) Bind(callback func(bool) error) {
	addr := fmt.Sprintf(
		"/track/%d/recarm",
		ep.state.track_guid,
	)

	ep.device.BindBool(addr, callback)
}

func (ep *trackRecarm) Set(val bool) error {
	addr := fmt.Sprintf(
		"/track/%d/recarm",
		ep.state.track_guid,
	)

	return ep.device.SetBool(addr, val)
}

type trackSend struct {
	device *devices.OscDevice
	Guid   *trackSendGuid
	Volume *trackSendVolume
	Pan    *trackSendPan
	state  trackSendState
}

type trackSendState struct {
	track_guid string
	send_index int64
}

type trackSendGuid struct {
	device *devices.OscDevice
	state  trackSendGuidState
}

type trackSendGuidState struct {
	track_guid string
	send_index int64
}

func (ep *trackSendGuid) Bind(callback func(string) error) {
	addr := fmt.Sprintf(
		"/track/%d/send/%d/guid",
		ep.state.track_guid,
		ep.state.send_index,
	)

	ep.device.BindString(addr, callback)
}

type trackSendVolume struct {
	device *devices.OscDevice
	state  trackSendVolumeState
}

type trackSendVolumeState struct {
	track_guid string
	send_index int64
}

func (ep *trackSendVolume) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/track/%d/send/%d/volume",
		ep.state.track_guid,
		ep.state.send_index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *trackSendVolume) Set(val float64) error {
	addr := fmt.Sprintf(
		"/track/%d/send/%d/volume",
		ep.state.track_guid,
		ep.state.send_index,
	)

	return ep.device.SetFloat(addr, val)
}

type trackSendPan struct {
	device *devices.OscDevice
	state  trackSendPanState
}

type trackSendPanState struct {
	track_guid string
	send_index int64
}

func (ep *trackSendPan) Bind(callback func(float64) error) {
	addr := fmt.Sprintf(
		"/track/%d/send/%d/pan",
		ep.state.track_guid,
		ep.state.send_index,
	)

	ep.device.BindFloat(addr, callback)
}

func (ep *trackSendPan) Set(val float64) error {
	addr := fmt.Sprintf(
		"/track/%d/send/%d/pan",
		ep.state.track_guid,
		ep.state.send_index,
	)

	return ep.device.SetFloat(addr, val)
}
