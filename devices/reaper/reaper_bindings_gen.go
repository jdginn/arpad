// Code generated by reaperoscgen. DO NOT EDIT.

package reaper

import (
	dev "github.com/jdginn/arpad/devices"
	"strconv"
	"strings"
)

// PathFxParamFxparamParamValue represents the path parameters for /fx/@/fxparam/@/value
type PathFxParamFxparamParamValue struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxParamFxparamParamValue represents the path parameters for /track/@/fx/@/fxparam/@/value
type PathTrackParamFxParamFxparamParamValue struct {
	Param1 int64
	Param2 int64
	Param3 int64
}

// PathTrackParamFxeqBandParamQ represents the path parameters for /track/@/fxeq/band/@/q
type PathTrackParamFxeqBandParamQ struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxeqBandParamQOct represents the path parameters for /track/@/fxeq/band/@/q/oct
type PathTrackParamFxeqBandParamQOct struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamRecvParamPan represents the path parameters for /track/@/recv/@/pan
type PathTrackParamRecvParamPan struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxParamPreset represents the path parameters for /track/@/fx/@/preset
type PathTrackParamFxParamPreset struct {
	Param1 int64
	Param2 int64
}

// PathVkb_midiParamPolyaftertouchParam represents the path parameters for /vkb_midi/@/polyaftertouch/@
type PathVkb_midiParamPolyaftertouchParam struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamSendParamPan represents the path parameters for /track/@/send/@/pan
type PathTrackParamSendParamPan struct {
	Param1 int64
	Param2 int64
}

// PathFxParamFxparamParamName represents the path parameters for /fx/@/fxparam/@/name
type PathFxParamFxparamParamName struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamRecvParamVolume represents the path parameters for /track/@/recv/@/volume
type PathTrackParamRecvParamVolume struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxParamBypass represents the path parameters for /track/@/fx/@/bypass
type PathTrackParamFxParamBypass struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamSendParamName represents the path parameters for /track/@/send/@/name
type PathTrackParamSendParamName struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamSendParamVolume represents the path parameters for /track/@/send/@/volume
type PathTrackParamSendParamVolume struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxParamPresetPlus represents the path parameters for /track/@/fx/@/preset+
type PathTrackParamFxParamPresetPlus struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxinstparamParamValue represents the path parameters for /track/@/fxinstparam/@/value
type PathTrackParamFxinstparamParamValue struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamRecvParamName represents the path parameters for /track/@/recv/@/name
type PathTrackParamRecvParamName struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxParamWetdry represents the path parameters for /track/@/fx/@/wetdry
type PathTrackParamFxParamWetdry struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxParamOpenui represents the path parameters for /track/@/fx/@/openui
type PathTrackParamFxParamOpenui struct {
	Param1 int64
	Param2 int64
}

// PathVkb_midiParamCcParam represents the path parameters for /vkb_midi/@/cc/@
type PathVkb_midiParamCcParam struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxParamName represents the path parameters for /track/@/fx/@/name
type PathTrackParamFxParamName struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxParamPresetMinus represents the path parameters for /track/@/fx/@/preset-
type PathTrackParamFxParamPresetMinus struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxeqBandParamFreq represents the path parameters for /track/@/fxeq/band/@/freq
type PathTrackParamFxeqBandParamFreq struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxeqBandParamFreqHz represents the path parameters for /track/@/fxeq/band/@/freq/hz
type PathTrackParamFxeqBandParamFreqHz struct {
	Param1 int64
	Param2 int64
}

// PathVkb_midiParamNoteParam represents the path parameters for /vkb_midi/@/note/@
type PathVkb_midiParamNoteParam struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxeqBandParamGain represents the path parameters for /track/@/fxeq/band/@/gain
type PathTrackParamFxeqBandParamGain struct {
	Param1 int64
	Param2 int64
}

// PathTrackParamFxeqBandParamGainDb represents the path parameters for /track/@/fxeq/band/@/gain/db
type PathTrackParamFxeqBandParamGainDb struct {
	Param1 int64
	Param2 int64
}

// FXEqBindings contains all FXEq-related binding methods
type FXEqBindings struct {
	r *Reaper
}

// DeviceBindings contains all Device-related binding methods
type DeviceBindings struct {
	r *Reaper
}

// TrackBindings contains all Track-related binding methods
type TrackBindings struct {
	r *Reaper
}

// Reaper represents a connection to REAPER
type Reaper struct {
	o      *dev.OscDevice
	Device *DeviceBindings
	FXEq   *FXEqBindings
	Track  *TrackBindings
}

// NewReaper creates a new REAPER connection with all bindings initialized
func NewReaper(o *dev.OscDevice) *Reaper {
	r := &Reaper{o: o}
	r.Device = &DeviceBindings{r: r}
	r.FXEq = &FXEqBindings{r: r}
	r.Track = &TrackBindings{r: r}
	return r
}

func (r *Reaper) Run() {
	r.o.Run()
}
func (r *Reaper) bindTrigger(addr string, callback func() error) {
	r.o.BindInt(addr, func(val int64) error {
		if val == 1 {
			return callback()
		}
		return nil
	})
}

func (r *Reaper) sendTrigger(addr string) error {
	return r.o.SetInt(addr, 1)
}

func (b *DeviceBindings) BindDeviceReceiveCount(param int64, callback func() error) {
	addr := "/device/receive/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceReceiveCount(param int64) error {
	addr := "/device/receive/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceFxInstParamBankSelect(param int64, callback func() error) {
	addr := "/device/fxinstparam/bank/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceFxInstParamBankSelect(param int64) error {
	addr := "/device/fxinstparam/bank/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceFxCount(param int64, callback func() error) {
	addr := "/device/fx/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceFxCount(param int64) error {
	addr := "/device/fx/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceFxFollows(callback func(string) error) {
	addr := "/device/fx/follows"
	b.r.o.BindString(addr, callback)
}

func (b *DeviceBindings) SendDeviceFxFollows(val string) error {
	addr := "/device/fx/follows"
	return b.r.o.SetString(addr, val)
}

func (b *DeviceBindings) BindDeviceFxFollowsLastTouched(callback func() error) {
	addr := "/device/fx/follows/last_touched"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceFxFollowsLastTouched() error {
	addr := "/device/fx/follows/last_touched"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceFxSelect(param int64, callback func() error) {
	addr := "/device/fx/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceFxSelect(param int64) error {
	addr := "/device/fx/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceNextFxInstParamBank(callback func() error) {
	addr := "/device/fxinstparam/bank/+"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceNextFxInstParamBank() error {
	addr := "/device/fxinstparam/bank/+"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceNextRegionBank(callback func() error) {
	addr := "/device/region/bank/+"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceNextRegionBank() error {
	addr := "/device/region/bank/+"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceTrackBankFollowsMixer(callback func() error) {
	addr := "/device/track/bank/follows/mixer"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceTrackBankFollowsMixer() error {
	addr := "/device/track/bank/follows/mixer"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceNextFx(callback func() error) {
	addr := "/device/fx/+"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceNextFx() error {
	addr := "/device/fx/+"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDevicePrevFxParamBank(callback func() error) {
	addr := "/device/fxparam/bank/-"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDevicePrevFxParamBank() error {
	addr := "/device/fxparam/bank/-"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceNextFxParamBank(callback func() error) {
	addr := "/device/fxparam/bank/+"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceNextFxParamBank() error {
	addr := "/device/fxparam/bank/+"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceNextTrackBank(callback func() error) {
	addr := "/device/track/bank/+"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceNextTrackBank() error {
	addr := "/device/track/bank/+"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceTrackFollowsDevice(callback func() error) {
	addr := "/device/track/follows/device"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceTrackFollowsDevice() error {
	addr := "/device/track/follows/device"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceFxFollowsFocused(callback func() error) {
	addr := "/device/fx/follows/focused"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceFxFollowsFocused() error {
	addr := "/device/fx/follows/focused"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceTrackFollowsLastTouched(callback func() error) {
	addr := "/device/track/follows/last_touched"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceTrackFollowsLastTouched() error {
	addr := "/device/track/follows/last_touched"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceTrackBankFollows(callback func(string) error) {
	addr := "/device/track/bank/follows"
	b.r.o.BindString(addr, callback)
}

func (b *DeviceBindings) SendDeviceTrackBankFollows(val string) error {
	addr := "/device/track/bank/follows"
	return b.r.o.SetString(addr, val)
}

func (b *DeviceBindings) BindDeviceMarkerBankSelect(param int64, callback func() error) {
	addr := "/device/marker/bank/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceMarkerBankSelect(param int64) error {
	addr := "/device/marker/bank/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDevicePrevRegionBank(callback func() error) {
	addr := "/device/region/bank/-"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDevicePrevRegionBank() error {
	addr := "/device/region/bank/-"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceNextMarkerBank(callback func() error) {
	addr := "/device/marker/bank/+"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceNextMarkerBank() error {
	addr := "/device/marker/bank/+"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceSendCount(param int64, callback func() error) {
	addr := "/device/send/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceSendCount(param int64) error {
	addr := "/device/send/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceMarkerCount(param int64, callback func() error) {
	addr := "/device/marker/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceMarkerCount(param int64) error {
	addr := "/device/marker/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceTrackFollows(callback func(string) error) {
	addr := "/device/track/follows"
	b.r.o.BindString(addr, callback)
}

func (b *DeviceBindings) SendDeviceTrackFollows(val string) error {
	addr := "/device/track/follows"
	return b.r.o.SetString(addr, val)
}

func (b *DeviceBindings) BindDevicePrevFx(callback func() error) {
	addr := "/device/fx/-"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDevicePrevFx() error {
	addr := "/device/fx/-"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceTrackBankSelect(param int64, callback func() error) {
	addr := "/device/track/bank/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceTrackBankSelect(param int64) error {
	addr := "/device/track/bank/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

// ----------------------------------------------------------------
// The following messages are sent from the device, to inform REAPER
// of a change in the device state, behavior, or display capabilities.
func (b *DeviceBindings) BindDeviceTrackCount(param int64, callback func() error) {
	addr := "/device/track/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

// ----------------------------------------------------------------
// The following messages are sent from the device, to inform REAPER
// of a change in the device state, behavior, or display capabilities.
func (b *DeviceBindings) SendDeviceTrackCount(param int64) error {
	addr := "/device/track/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceRegionCount(param int64, callback func() error) {
	addr := "/device/region/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceRegionCount(param int64) error {
	addr := "/device/region/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceFxParamBankSelect(param int64, callback func() error) {
	addr := "/device/fxparam/bank/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceFxParamBankSelect(param int64) error {
	addr := "/device/fxparam/bank/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceTrackBankFollowsDevice(callback func() error) {
	addr := "/device/track/bank/follows/device"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceTrackBankFollowsDevice() error {
	addr := "/device/track/bank/follows/device"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceFxFollowsDevice(callback func() error) {
	addr := "/device/fx/follows/device"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceFxFollowsDevice() error {
	addr := "/device/fx/follows/device"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceNextTrack(callback func() error) {
	addr := "/device/track/+"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceNextTrack() error {
	addr := "/device/track/+"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDevicePrevFxInstParamBank(callback func() error) {
	addr := "/device/fxinstparam/bank/-"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDevicePrevFxInstParamBank() error {
	addr := "/device/fxinstparam/bank/-"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceFxInstParamCount(param int64, callback func() error) {
	addr := "/device/fxinstparam/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceFxInstParamCount(param int64) error {
	addr := "/device/fxinstparam/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceRegionBankSelect(param int64, callback func() error) {
	addr := "/device/region/bank/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceRegionBankSelect(param int64) error {
	addr := "/device/region/bank/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceFxParamCount(param int64, callback func() error) {
	addr := "/device/fxparam/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceFxParamCount(param int64) error {
	addr := "/device/fxparam/count/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDevicePrevMarkerBank(callback func() error) {
	addr := "/device/marker/bank/-"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDevicePrevMarkerBank() error {
	addr := "/device/marker/bank/-"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDeviceTrackSelect(param int64, callback func() error) {
	addr := "/device/track/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDeviceTrackSelect(param int64) error {
	addr := "/device/track/select/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDevicePrevTrackBank(callback func() error) {
	addr := "/device/track/bank/-"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDevicePrevTrackBank() error {
	addr := "/device/track/bank/-"
	return b.r.sendTrigger(addr)
}

func (b *DeviceBindings) BindDevicePrevTrack(callback func() error) {
	addr := "/device/track/-"
	b.r.bindTrigger(addr, callback)
}

func (b *DeviceBindings) SendDevicePrevTrack() error {
	addr := "/device/track/-"
	return b.r.sendTrigger(addr)
}

func (b *FXEqBindings) BindFxEqLoshelfName(callback func(string) error) {
	addr := "/fxeq/loshelf/str"
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfName(val string) error {
	addr := "/fxeq/loshelf/str"
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqBandName(callback func(string) error) {
	addr := "/fxeq/band/str"
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandName(val string) error {
	addr := "/fxeq/band/str"
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqBandQ(param int64, callback func(float64) error) {
	addr := "/fxeq/band/@/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandQ(param int64, val float64) error {
	addr := "/fxeq/band/@/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqBandQOct(param int64, callback func(float64) error) {
	addr := "/fxeq/band/@/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandQOct(param int64, val float64) error {
	addr := "/fxeq/band/@/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqBandQTrackFxeqBandQ(path PathTrackParamFxeqBandParamQ, callback func(float64) error) {
	addr := "/track/@/fxeq/band/@/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandQTrackFxeqBandQ(path PathTrackParamFxeqBandParamQ, val float64) error {
	addr := "/track/@/fxeq/band/@/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqBandQTrackFxeqBandQOct(path PathTrackParamFxeqBandParamQOct, callback func(float64) error) {
	addr := "/track/@/fxeq/band/@/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandQTrackFxeqBandQOct(path PathTrackParamFxeqBandParamQOct, val float64) error {
	addr := "/track/@/fxeq/band/@/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqPrevPreset(callback func(string) error) {
	addr := "/fxeq/preset-"
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqPrevPreset(val string) error {
	addr := "/fxeq/preset-"
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqPrevPresetTrackFxeqPresetMinus(param int64, callback func(string) error) {
	addr := "/track/@/fxeq/preset-"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqPrevPresetTrackFxeqPresetMinus(param int64, val string) error {
	addr := "/track/@/fxeq/preset-"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqHipassQ(callback func(float64) error) {
	addr := "/fxeq/hipass/q"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHipassQ(val float64) error {
	addr := "/fxeq/hipass/q"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHipassQOct(callback func(float64) error) {
	addr := "/fxeq/hipass/q/oct"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHipassQOct(val float64) error {
	addr := "/fxeq/hipass/q/oct"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHipassQTrackFxeqHipassQ(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/hipass/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHipassQTrackFxeqHipassQ(param int64, val float64) error {
	addr := "/track/@/fxeq/hipass/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHipassQTrackFxeqHipassQOct(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/hipass/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHipassQTrackFxeqHipassQOct(param int64, val float64) error {
	addr := "/track/@/fxeq/hipass/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfName(callback func(string) error) {
	addr := "/fxeq/hishelf/str"
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfName(val string) error {
	addr := "/fxeq/hishelf/str"
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqBypass(callback func(bool) error) {
	addr := "/fxeq/bypass"
	b.r.o.BindBool(addr, callback)
}

func (b *FXEqBindings) SendFxEqBypass(val bool) error {
	addr := "/fxeq/bypass"
	return b.r.o.SetBool(addr, val)
}

func (b *FXEqBindings) BindFxEqBypassTrackFxeqBypass(param int64, callback func(bool) error) {
	addr := "/track/@/fxeq/bypass"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindBool(addr, callback)
}

func (b *FXEqBindings) SendFxEqBypassTrackFxeqBypass(param int64, val bool) error {
	addr := "/track/@/fxeq/bypass"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetBool(addr, val)
}

func (b *FXEqBindings) BindFxEqHipassBypass(callback func(bool) error) {
	addr := "/fxeq/hipass/bypass"
	b.r.o.BindBool(addr, callback)
}

func (b *FXEqBindings) SendFxEqHipassBypass(val bool) error {
	addr := "/fxeq/hipass/bypass"
	return b.r.o.SetBool(addr, val)
}

func (b *FXEqBindings) BindFxEqPreset(callback func(string) error) {
	addr := "/fxeq/preset"
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqPreset(val string) error {
	addr := "/fxeq/preset"
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqPresetTrackFxeqPreset(param int64, callback func(string) error) {
	addr := "/track/@/fxeq/preset"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqPresetTrackFxeqPreset(param int64, val string) error {
	addr := "/track/@/fxeq/preset"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfGain(callback func(float64) error) {
	addr := "/fxeq/hishelf/gain"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfGain(val float64) error {
	addr := "/fxeq/hishelf/gain"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfGainSb(callback func(float64) error) {
	addr := "/fxeq/hishelf/gain/sb"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfGainSb(val float64) error {
	addr := "/fxeq/hishelf/gain/sb"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfGainTrackFxeqHishelfGain(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/hishelf/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfGainTrackFxeqHishelfGain(param int64, val float64) error {
	addr := "/track/@/fxeq/hishelf/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfGainTrackFxeqHishelfGainDb(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/hishelf/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfGainTrackFxeqHishelfGainDb(param int64, val float64) error {
	addr := "/track/@/fxeq/hishelf/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfQ(callback func(float64) error) {
	addr := "/fxeq/loshelf/q"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfQ(val float64) error {
	addr := "/fxeq/loshelf/q"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfQOct(callback func(float64) error) {
	addr := "/fxeq/loshelf/q/oct"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfQOct(val float64) error {
	addr := "/fxeq/loshelf/q/oct"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfQTrackFxeqLoshelfQ(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/loshelf/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfQTrackFxeqLoshelfQ(param int64, val float64) error {
	addr := "/track/@/fxeq/loshelf/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfQTrackFxeqLoshelfQOct(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/loshelf/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfQTrackFxeqLoshelfQOct(param int64, val float64) error {
	addr := "/track/@/fxeq/loshelf/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfQ(callback func(float64) error) {
	addr := "/fxeq/hishelf/q"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfQ(val float64) error {
	addr := "/fxeq/hishelf/q"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfQOct(callback func(float64) error) {
	addr := "/fxeq/hishelf/q/oct"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfQOct(val float64) error {
	addr := "/fxeq/hishelf/q/oct"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfQTrackFxeqHishelfQ(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/hishelf/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfQTrackFxeqHishelfQ(param int64, val float64) error {
	addr := "/track/@/fxeq/hishelf/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfQTrackFxeqHishelfQOct(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/hishelf/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfQTrackFxeqHishelfQOct(param int64, val float64) error {
	addr := "/track/@/fxeq/hishelf/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHipassFreq(callback func(float64) error) {
	addr := "/fxeq/hipass/freq"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHipassFreq(val float64) error {
	addr := "/fxeq/hipass/freq"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHipassFreqHz(callback func(float64) error) {
	addr := "/fxeq/hipass/freq/hz"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHipassFreqHz(val float64) error {
	addr := "/fxeq/hipass/freq/hz"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHipassFreqTrackFxeqHipassFreq(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/hipass/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHipassFreqTrackFxeqHipassFreq(param int64, val float64) error {
	addr := "/track/@/fxeq/hipass/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHipassFreqTrackFxeqHipassFreqHz(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/hipass/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHipassFreqTrackFxeqHipassFreqHz(param int64, val float64) error {
	addr := "/track/@/fxeq/hipass/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNextPreset(callback func(string) error) {
	addr := "/fxeq/preset+"
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqNextPreset(val string) error {
	addr := "/fxeq/preset+"
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqNextPresetTrackFxeqPresetPlus(param int64, callback func(string) error) {
	addr := "/track/@/fxeq/preset+"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqNextPresetTrackFxeqPresetPlus(param int64, val string) error {
	addr := "/track/@/fxeq/preset+"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqLopassName(callback func(string) error) {
	addr := "/fxeq/lopass/str"
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqLopassName(val string) error {
	addr := "/fxeq/lopass/str"
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqMasterGain(callback func(float64) error) {
	addr := "/fxeq/gain"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqMasterGain(val float64) error {
	addr := "/fxeq/gain"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqMasterGainDb(callback func(float64) error) {
	addr := "/fxeq/gain/db"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqMasterGainDb(val float64) error {
	addr := "/fxeq/gain/db"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqMasterGainTrackFxeqGain(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqMasterGainTrackFxeqGain(param int64, val float64) error {
	addr := "/track/@/fxeq/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqMasterGainTrackFxeqGainDb(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqMasterGainTrackFxeqGainDb(param int64, val float64) error {
	addr := "/track/@/fxeq/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfGain(callback func(float64) error) {
	addr := "/fxeq/loshelf/gain"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfGain(val float64) error {
	addr := "/fxeq/loshelf/gain"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfGainDb(callback func(float64) error) {
	addr := "/fxeq/loshelf/gain/db"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfGainDb(val float64) error {
	addr := "/fxeq/loshelf/gain/db"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfGainTrackFxeqLoshelfGain(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/loshelf/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfGainTrackFxeqLoshelfGain(param int64, val float64) error {
	addr := "/track/@/fxeq/loshelf/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfGainTrackFxeqLoshelfGainDb(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/loshelf/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfGainTrackFxeqLoshelfGainDb(param int64, val float64) error {
	addr := "/track/@/fxeq/loshelf/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchGain(callback func(float64) error) {
	addr := "/fxeq/notch/gain"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchGain(val float64) error {
	addr := "/fxeq/notch/gain"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchGainDb(callback func(float64) error) {
	addr := "/fxeq/notch/gain/db"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchGainDb(val float64) error {
	addr := "/fxeq/notch/gain/db"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchGainTrackFxeqNotchGain(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/notch/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchGainTrackFxeqNotchGain(param int64, val float64) error {
	addr := "/track/@/fxeq/notch/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchGainTrackFxeqNotchGainDb(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/notch/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchGainTrackFxeqNotchGainDb(param int64, val float64) error {
	addr := "/track/@/fxeq/notch/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfFreq(callback func(float64) error) {
	addr := "/fxeq/hishelf/freq"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfFreq(val float64) error {
	addr := "/fxeq/hishelf/freq"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfFreqHz(callback func(float64) error) {
	addr := "/fxeq/hishelf/freq/hz"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfFreqHz(val float64) error {
	addr := "/fxeq/hishelf/freq/hz"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfFreqTrackFxeqHishelfFreq(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/hishelf/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfFreqTrackFxeqHishelfFreq(param int64, val float64) error {
	addr := "/track/@/fxeq/hishelf/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfFreqTrackFxeqHishelfFreqHz(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/hishelf/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfFreqTrackFxeqHishelfFreqHz(param int64, val float64) error {
	addr := "/track/@/fxeq/hishelf/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLopassQ(callback func(float64) error) {
	addr := "/fxeq/lopass/q"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLopassQ(val float64) error {
	addr := "/fxeq/lopass/q"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLopassQOct(callback func(float64) error) {
	addr := "/fxeq/lopass/q/oct"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLopassQOct(val float64) error {
	addr := "/fxeq/lopass/q/oct"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLopassQTrackFxeqLopassQ(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/lopass/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLopassQTrackFxeqLopassQ(param int64, val float64) error {
	addr := "/track/@/fxeq/lopass/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLopassQTrackFxeqLopassQOct(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/lopass/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLopassQTrackFxeqLopassQOct(param int64, val float64) error {
	addr := "/track/@/fxeq/lopass/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfFreq(callback func(float64) error) {
	addr := "/fxeq/loshelf/freq"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfFreq(val float64) error {
	addr := "/fxeq/loshelf/freq"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfFreqHz(callback func(float64) error) {
	addr := "/fxeq/loshelf/freq/hz"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfFreqHz(val float64) error {
	addr := "/fxeq/loshelf/freq/hz"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfFreqTrackFxeqLoshelfFreq(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/loshelf/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfFreqTrackFxeqLoshelfFreq(param int64, val float64) error {
	addr := "/track/@/fxeq/loshelf/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfFreqTrackFxeqLoshelfFreqHz(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/loshelf/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfFreqTrackFxeqLoshelfFreqHz(param int64, val float64) error {
	addr := "/track/@/fxeq/loshelf/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqBandBypass(param int64, callback func(bool) error) {
	addr := "/fxeq/band/@/bypass"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindBool(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandBypass(param int64, val bool) error {
	addr := "/fxeq/band/@/bypass"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetBool(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchQ(callback func(float64) error) {
	addr := "/fxeq/notch/q"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchQ(val float64) error {
	addr := "/fxeq/notch/q"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchQOct(callback func(float64) error) {
	addr := "/fxeq/notch/q/oct"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchQOct(val float64) error {
	addr := "/fxeq/notch/q/oct"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchQTrackFxeqNotchQ(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/notch/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchQTrackFxeqNotchQ(param int64, val float64) error {
	addr := "/track/@/fxeq/notch/q"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchQTrackFxeqNotchQOct(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/notch/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchQTrackFxeqNotchQOct(param int64, val float64) error {
	addr := "/track/@/fxeq/notch/q/oct"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLopassFreq(callback func(float64) error) {
	addr := "/fxeq/lopass/freq"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLopassFreq(val float64) error {
	addr := "/fxeq/lopass/freq"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLopassFreqHz(callback func(float64) error) {
	addr := "/fxeq/lopass/freq/hz"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLopassFreqHz(val float64) error {
	addr := "/fxeq/lopass/freq/hz"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLopassFreqTrackFxeqLopassFreq(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/lopass/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLopassFreqTrackFxeqLopassFreq(param int64, val float64) error {
	addr := "/track/@/fxeq/lopass/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLopassFreqTrackFxeqLopassFreqHz(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/lopass/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqLopassFreqTrackFxeqLopassFreqHz(param int64, val float64) error {
	addr := "/track/@/fxeq/lopass/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqWetdry(callback func(float64) error) {
	addr := "/fxeq/wetdry"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqWetdry(val float64) error {
	addr := "/fxeq/wetdry"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqWetdryTrackFxeqWetdry(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/wetdry"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqWetdryTrackFxeqWetdry(param int64, val float64) error {
	addr := "/track/@/fxeq/wetdry"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqOpenUi(callback func(bool) error) {
	addr := "/fxeq/openui"
	b.r.o.BindBool(addr, callback)
}

func (b *FXEqBindings) SendFxEqOpenUi(val bool) error {
	addr := "/fxeq/openui"
	return b.r.o.SetBool(addr, val)
}

func (b *FXEqBindings) BindFxEqOpenUiTrackFxeqOpenui(param int64, callback func(bool) error) {
	addr := "/track/@/fxeq/openui"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindBool(addr, callback)
}

func (b *FXEqBindings) SendFxEqOpenUiTrackFxeqOpenui(param int64, val bool) error {
	addr := "/track/@/fxeq/openui"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetBool(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchName(callback func(string) error) {
	addr := "/fxeq/notch/str"
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchName(val string) error {
	addr := "/fxeq/notch/str"
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqHishelfBypass(callback func(bool) error) {
	addr := "/fxeq/hishelf/bypass"
	b.r.o.BindBool(addr, callback)
}

func (b *FXEqBindings) SendFxEqHishelfBypass(val bool) error {
	addr := "/fxeq/hishelf/bypass"
	return b.r.o.SetBool(addr, val)
}

func (b *FXEqBindings) BindFxEqLopassBypass(callback func(bool) error) {
	addr := "/fxeq/lopass/bypass"
	b.r.o.BindBool(addr, callback)
}

func (b *FXEqBindings) SendFxEqLopassBypass(val bool) error {
	addr := "/fxeq/lopass/bypass"
	return b.r.o.SetBool(addr, val)
}

func (b *FXEqBindings) BindFxEqHipassName(callback func(string) error) {
	addr := "/fxeq/hipass/str"
	b.r.o.BindString(addr, callback)
}

func (b *FXEqBindings) SendFxEqHipassName(val string) error {
	addr := "/fxeq/hipass/str"
	return b.r.o.SetString(addr, val)
}

func (b *FXEqBindings) BindFxEqBandFreq(param int64, callback func(float64) error) {
	addr := "/fxeq/band/@/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandFreq(param int64, val float64) error {
	addr := "/fxeq/band/@/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqBandFreqHz(param int64, callback func(float64) error) {
	addr := "/fxeq/band/@/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandFreqHz(param int64, val float64) error {
	addr := "/fxeq/band/@/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqBandFreqTrackFxeqBandFreq(path PathTrackParamFxeqBandParamFreq, callback func(float64) error) {
	addr := "/track/@/fxeq/band/@/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandFreqTrackFxeqBandFreq(path PathTrackParamFxeqBandParamFreq, val float64) error {
	addr := "/track/@/fxeq/band/@/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqBandFreqTrackFxeqBandFreqHz(path PathTrackParamFxeqBandParamFreqHz, callback func(float64) error) {
	addr := "/track/@/fxeq/band/@/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandFreqTrackFxeqBandFreqHz(path PathTrackParamFxeqBandParamFreqHz, val float64) error {
	addr := "/track/@/fxeq/band/@/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchFreq(callback func(float64) error) {
	addr := "/fxeq/notch/freq"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchFreq(val float64) error {
	addr := "/fxeq/notch/freq"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchFreqHz(callback func(float64) error) {
	addr := "/fxeq/notch/freq/hz"
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchFreqHz(val float64) error {
	addr := "/fxeq/notch/freq/hz"
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchFreqTrackFxeqNotchFreq(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/notch/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchFreqTrackFxeqNotchFreq(param int64, val float64) error {
	addr := "/track/@/fxeq/notch/freq"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchFreqTrackFxeqNotchFreqHz(param int64, callback func(float64) error) {
	addr := "/track/@/fxeq/notch/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchFreqTrackFxeqNotchFreqHz(param int64, val float64) error {
	addr := "/track/@/fxeq/notch/freq/hz"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqLoshelfBypass(callback func(bool) error) {
	addr := "/fxeq/loshelf/bypass"
	b.r.o.BindBool(addr, callback)
}

func (b *FXEqBindings) SendFxEqLoshelfBypass(val bool) error {
	addr := "/fxeq/loshelf/bypass"
	return b.r.o.SetBool(addr, val)
}

func (b *FXEqBindings) BindFxEqBandGain(param int64, callback func(float64) error) {
	addr := "/fxeq/band/@/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandGain(param int64, val float64) error {
	addr := "/fxeq/band/@/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqBandGainDb(param int64, callback func(float64) error) {
	addr := "/fxeq/band/@/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandGainDb(param int64, val float64) error {
	addr := "/fxeq/band/@/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqBandGainTrackFxeqBandGain(path PathTrackParamFxeqBandParamGain, callback func(float64) error) {
	addr := "/track/@/fxeq/band/@/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandGainTrackFxeqBandGain(path PathTrackParamFxeqBandParamGain, val float64) error {
	addr := "/track/@/fxeq/band/@/gain"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqBandGainTrackFxeqBandGainDb(path PathTrackParamFxeqBandParamGainDb, callback func(float64) error) {
	addr := "/track/@/fxeq/band/@/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *FXEqBindings) SendFxEqBandGainTrackFxeqBandGainDb(path PathTrackParamFxeqBandParamGainDb, val float64) error {
	addr := "/track/@/fxeq/band/@/gain/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *FXEqBindings) BindFxEqNotchBypass(callback func(bool) error) {
	addr := "/fxeq/notch/bypass"
	b.r.o.BindBool(addr, callback)
}

func (b *FXEqBindings) SendFxEqNotchBypass(val bool) error {
	addr := "/fxeq/notch/bypass"
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackAuto(callback func(string) error) {
	addr := "/track/auto"
	b.r.o.BindString(addr, callback)
}

func (b *TrackBindings) SendTrackAuto(val string) error {
	addr := "/track/auto"
	return b.r.o.SetString(addr, val)
}

func (b *TrackBindings) BindTrackPanMode(param int64, callback func(string) error) {
	addr := "/track/@/panmode"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindString(addr, callback)
}

func (b *TrackBindings) SendTrackPanMode(param int64, val string) error {
	addr := "/track/@/panmode"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetString(addr, val)
}

func (b *TrackBindings) BindTrackPanModePanmode(callback func(string) error) {
	addr := "/track/panmode"
	b.r.o.BindString(addr, callback)
}

func (b *TrackBindings) SendTrackPanModePanmode(val string) error {
	addr := "/track/panmode"
	return b.r.o.SetString(addr, val)
}

func (b *TrackBindings) BindTrackVolumeTouch(param int64, callback func(bool) error) {
	addr := "/track/@/volume/touch"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackVolumeTouch(param int64, val bool) error {
	addr := "/track/@/volume/touch"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackVolumeTouchVolumeTouch(callback func(bool) error) {
	addr := "/track/volume/touch"
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackVolumeTouchVolumeTouch(val bool) error {
	addr := "/track/volume/touch"
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackRecArm(param int64, callback func(bool) error) {
	addr := "/track/@/recarm"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackRecArm(param int64, val bool) error {
	addr := "/track/@/recarm"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackRecArmToggle(param int64, callback func() error) {
	addr := "/track/@/recarm/toggle"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackRecArmToggle(param int64) error {
	addr := "/track/@/recarm/toggle"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackRecArmRecarm(callback func(bool) error) {
	addr := "/track/recarm"
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackRecArmRecarm(val bool) error {
	addr := "/track/recarm"
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackRecArmRecarmToggle(callback func() error) {
	addr := "/track/recarm/toggle"
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackRecArmRecarmToggle() error {
	addr := "/track/recarm/toggle"
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackMonitor(param int64, callback func(int64) error) {
	addr := "/track/@/monitor"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindInt(addr, callback)
}

func (b *TrackBindings) SendTrackMonitor(param int64, val int64) error {
	addr := "/track/@/monitor"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetInt(addr, val)
}

func (b *TrackBindings) BindTrackMonitorMonitor(callback func(int64) error) {
	addr := "/track/monitor"
	b.r.o.BindInt(addr, callback)
}

func (b *TrackBindings) SendTrackMonitorMonitor(val int64) error {
	addr := "/track/monitor"
	return b.r.o.SetInt(addr, val)
}

func (b *TrackBindings) BindTrackRecvPan(path PathTrackParamRecvParamPan, callback func(float64) error) {
	addr := "/track/@/recv/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackRecvPan(path PathTrackParamRecvParamPan, val float64) error {
	addr := "/track/@/recv/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackRecvPanRecvPan(param int64, callback func(float64) error) {
	addr := "/track/recv/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackRecvPanRecvPan(param int64, val float64) error {
	addr := "/track/recv/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackPan(param int64, callback func(float64) error) {
	addr := "/track/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackPan(param int64, val float64) error {
	addr := "/track/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackPanPan(callback func(float64) error) {
	addr := "/track/pan"
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackPanPan(val float64) error {
	addr := "/track/pan"
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackSendPan(path PathTrackParamSendParamPan, callback func(float64) error) {
	addr := "/track/@/send/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackSendPan(path PathTrackParamSendParamPan, val float64) error {
	addr := "/track/@/send/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackSendPanSendPan(param int64, callback func(float64) error) {
	addr := "/track/send/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackSendPanSendPan(param int64, val float64) error {
	addr := "/track/send/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackAutoLatch(param int64, callback func() error) {
	addr := "/track/@/autolatch"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackAutoLatch(param int64) error {
	addr := "/track/@/autolatch"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackAutoLatchAutolatch(callback func() error) {
	addr := "/track/autolatch"
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackAutoLatchAutolatch() error {
	addr := "/track/autolatch"
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackRecvVolume(path PathTrackParamRecvParamVolume, callback func(float64) error) {
	addr := "/track/@/recv/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackRecvVolume(path PathTrackParamRecvParamVolume, val float64) error {
	addr := "/track/@/recv/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackRecvVolumeRecvVolume(param int64, callback func(float64) error) {
	addr := "/track/recv/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackRecvVolumeRecvVolume(param int64, val float64) error {
	addr := "/track/recv/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackVuR(param int64, callback func(float64) error) {
	addr := "/track/@/vu/R"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackVuR(param int64, val float64) error {
	addr := "/track/@/vu/R"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackVuRVuR(callback func(float64) error) {
	addr := "/track/vu/R"
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackVuRVuR(val float64) error {
	addr := "/track/vu/R"
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackAutoRead(param int64, callback func() error) {
	addr := "/track/@/autoread"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackAutoRead(param int64) error {
	addr := "/track/@/autoread"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackAutoReadAutoread(callback func() error) {
	addr := "/track/autoread"
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackAutoReadAutoread() error {
	addr := "/track/autoread"
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackSendName(path PathTrackParamSendParamName, callback func(string) error) {
	addr := "/track/@/send/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindString(addr, callback)
}

func (b *TrackBindings) SendTrackSendName(path PathTrackParamSendParamName, val string) error {
	addr := "/track/@/send/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetString(addr, val)
}

func (b *TrackBindings) BindTrackSendNameSendName(param int64, callback func(string) error) {
	addr := "/track/send/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindString(addr, callback)
}

func (b *TrackBindings) SendTrackSendNameSendName(param int64, val string) error {
	addr := "/track/send/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetString(addr, val)
}

func (b *TrackBindings) BindTrackSendVolume(path PathTrackParamSendParamVolume, callback func(float64) error) {
	addr := "/track/@/send/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackSendVolume(path PathTrackParamSendParamVolume, val float64) error {
	addr := "/track/@/send/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackSendVolumeSendVolume(param int64, callback func(float64) error) {
	addr := "/track/send/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackSendVolumeSendVolume(param int64, val float64) error {
	addr := "/track/send/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackPan2(param int64, callback func(float64) error) {
	addr := "/track/@/pan2"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackPan2(param int64, val float64) error {
	addr := "/track/@/pan2"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackPan2Pan2(callback func(float64) error) {
	addr := "/track/pan2"
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackPan2Pan2(val float64) error {
	addr := "/track/pan2"
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackPanTouch(param int64, callback func(bool) error) {
	addr := "/track/@/pan/touch"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackPanTouch(param int64, val bool) error {
	addr := "/track/@/pan/touch"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackPanTouchPanTouch(callback func(bool) error) {
	addr := "/track/pan/touch"
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackPanTouchPanTouch(val bool) error {
	addr := "/track/pan/touch"
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackAutoWrite(param int64, callback func() error) {
	addr := "/track/@/autowrite"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackAutoWrite(param int64) error {
	addr := "/track/@/autowrite"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackAutoWriteAutowrite(callback func() error) {
	addr := "/track/autowrite"
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackAutoWriteAutowrite() error {
	addr := "/track/autowrite"
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackAutoTouch(param int64, callback func() error) {
	addr := "/track/@/autotouch"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackAutoTouch(param int64) error {
	addr := "/track/@/autotouch"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackAutoTouchAutotouch(callback func() error) {
	addr := "/track/autotouch"
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackAutoTouchAutotouch() error {
	addr := "/track/autotouch"
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackName(param int64, callback func(string) error) {
	addr := "/track/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindString(addr, callback)
}

func (b *TrackBindings) SendTrackName(param int64, val string) error {
	addr := "/track/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetString(addr, val)
}

func (b *TrackBindings) BindTrackNameName(callback func(string) error) {
	addr := "/track/name"
	b.r.o.BindString(addr, callback)
}

func (b *TrackBindings) SendTrackNameName(val string) error {
	addr := "/track/name"
	return b.r.o.SetString(addr, val)
}

func (b *TrackBindings) BindTrackRecvName(path PathTrackParamRecvParamName, callback func(string) error) {
	addr := "/track/@/recv/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	b.r.o.BindString(addr, callback)
}

func (b *TrackBindings) SendTrackRecvName(path PathTrackParamRecvParamName, val string) error {
	addr := "/track/@/recv/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	return b.r.o.SetString(addr, val)
}

func (b *TrackBindings) BindTrackRecvNameRecvName(param int64, callback func(string) error) {
	addr := "/track/recv/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindString(addr, callback)
}

func (b *TrackBindings) SendTrackRecvNameRecvName(param int64, val string) error {
	addr := "/track/recv/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetString(addr, val)
}

func (b *TrackBindings) BindTrackNumber(param int64, callback func(string) error) {
	addr := "/track/@/number/str"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindString(addr, callback)
}

func (b *TrackBindings) SendTrackNumber(param int64, val string) error {
	addr := "/track/@/number/str"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetString(addr, val)
}

func (b *TrackBindings) BindTrackSelect(param int64, callback func(bool) error) {
	addr := "/track/@/select"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackSelect(param int64, val bool) error {
	addr := "/track/@/select"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackSelectSelect(callback func(bool) error) {
	addr := "/track/select"
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackSelectSelect(val bool) error {
	addr := "/track/select"
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackAutoTrim(param int64, callback func() error) {
	addr := "/track/@/autotrim"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackAutoTrim(param int64) error {
	addr := "/track/@/autotrim"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackAutoTrimAutotrim(callback func() error) {
	addr := "/track/autotrim"
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackAutoTrimAutotrim() error {
	addr := "/track/autotrim"
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackSolo(param int64, callback func(bool) error) {
	addr := "/track/@/solo"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackSolo(param int64, val bool) error {
	addr := "/track/@/solo"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackSoloToggle(param int64, callback func() error) {
	addr := "/track/@/solo/toggle"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackSoloToggle(param int64) error {
	addr := "/track/@/solo/toggle"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackSoloSolo(callback func(bool) error) {
	addr := "/track/solo"
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackSoloSolo(val bool) error {
	addr := "/track/solo"
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackSoloSoloToggle(callback func() error) {
	addr := "/track/solo/toggle"
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackSoloSoloToggle() error {
	addr := "/track/solo/toggle"
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackMute(param int64, callback func(bool) error) {
	addr := "/track/@/mute"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackMute(param int64, val bool) error {
	addr := "/track/@/mute"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackMuteToggle(param int64, callback func() error) {
	addr := "/track/@/mute/toggle"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackMuteToggle(param int64) error {
	addr := "/track/@/mute/toggle"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackMuteMute(callback func(bool) error) {
	addr := "/track/mute"
	b.r.o.BindBool(addr, callback)
}

func (b *TrackBindings) SendTrackMuteMute(val bool) error {
	addr := "/track/mute"
	return b.r.o.SetBool(addr, val)
}

func (b *TrackBindings) BindTrackMuteMuteToggle(callback func() error) {
	addr := "/track/mute/toggle"
	b.r.bindTrigger(addr, callback)
}

func (b *TrackBindings) SendTrackMuteMuteToggle() error {
	addr := "/track/mute/toggle"
	return b.r.sendTrigger(addr)
}

func (b *TrackBindings) BindTrackVu(param int64, callback func(float64) error) {
	addr := "/track/@/vu"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackVu(param int64, val float64) error {
	addr := "/track/@/vu"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackVuVu(callback func(float64) error) {
	addr := "/track/vu"
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackVuVu(val float64) error {
	addr := "/track/vu"
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackVolume(param int64, callback func(float64) error) {
	addr := "/track/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackVolume(param int64, val float64) error {
	addr := "/track/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackVolumeDb(param int64, callback func(float64) error) {
	addr := "/track/@/volume/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackVolumeDb(param int64, val float64) error {
	addr := "/track/@/volume/db"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackVolumeVolume(callback func(float64) error) {
	addr := "/track/volume"
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackVolumeVolume(val float64) error {
	addr := "/track/volume"
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackVolumeVolumeDb(callback func(float64) error) {
	addr := "/track/volume/db"
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackVolumeVolumeDb(val float64) error {
	addr := "/track/volume/db"
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackVuL(param int64, callback func(float64) error) {
	addr := "/track/@/vu/L"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackVuL(param int64, val float64) error {
	addr := "/track/@/vu/L"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	return b.r.o.SetFloat(addr, val)
}

func (b *TrackBindings) BindTrackVuLVuL(callback func(float64) error) {
	addr := "/track/vu/L"
	b.r.o.BindFloat(addr, callback)
}

func (b *TrackBindings) SendTrackVuLVuL(val float64) error {
	addr := "/track/vu/L"
	return b.r.o.SetFloat(addr, val)
}

func (r *Reaper) BindRepeat(callback func() error) {
	addr := "/repeat"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindLastMarkerTime(callback func(float64) error) {
	addr := "/lastmarker/time"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindZoomXMinus(callback func(float64) error) {
	addr := "/zoom/x"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindZoomXMinusMinus(callback func(bool) error) {
	addr := "/zoom/x/-"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindRegionName(param int64, callback func(string) error) {
	addr := "/region/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindLoopStartTime(callback func(float64) error) {
	addr := "/loop/start/time"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindMasterSendVolume(param int64, callback func(float64) error) {
	addr := "/master/send/@/volume"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxParamValue(path PathFxParamFxparamParamValue, callback func(float64) error) {
	addr := "/fx/@/fxparam/@/value"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxParamValueFxparamValue(param int64, callback func(float64) error) {
	addr := "/fxparam/@/value"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxParamValueTrackFxFxparamValue(path PathTrackParamFxParamFxparamParamValue, callback func(float64) error) {
	addr := "/track/@/fx/@/fxparam/@/value"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param3, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindReplace(callback func() error) {
	addr := "/replace"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindRegionidName(param int64, callback func(string) error) {
	addr := "/region_id/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxInstParamName(param int64, callback func(string) error) {
	addr := "/fxinstparam/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindLastTouchedFxTrackNumber(callback func(string) error) {
	addr := "/fx/last_touched/track/number/str"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindLastTouchedFxNumber(callback func(string) error) {
	addr := "/fx/last_touched/number/str"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindRewindForwardBymarker(callback func() error) {
	addr := "/bymarker"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindFxInstName(callback func(string) error) {
	addr := "/fxinst/name"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxInstNameTrackFxinstName(param int64, callback func(string) error) {
	addr := "/track/@/fxinst/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxInstBypass(callback func(bool) error) {
	addr := "/fxinst/bypass"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindFxInstBypassTrackFxinstBypass(param int64, callback func(bool) error) {
	addr := "/track/@/fxinst/bypass"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindFxPreset(param int64, callback func(string) error) {
	addr := "/fx/@/preset"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxPresetPreset(callback func(string) error) {
	addr := "/fx/preset"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxPresetTrackFxPreset(path PathTrackParamFxParamPreset, callback func(string) error) {
	addr := "/track/@/fx/@/preset"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindString(addr, callback)
}

// similar, but for 0xA0 (poly aftertouch)
func (r *Reaper) BindVkbMidiPolyaftertouch(path PathVkb_midiParamPolyaftertouchParam, callback func(int64) error) {
	addr := "/vkb_midi/@/polyaftertouch/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindInt(addr, callback)
}

// similar, but for 0xA0 (poly aftertouch)
func (r *Reaper) BindVkbMidiPolyaftertouchPolyaftertouch(param int64, callback func(int64) error) {
	addr := "/vkb_midi/polyaftertouch/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindInt(addr, callback)
}

func (r *Reaper) BindTime(callback func(float64) error) {
	addr := "/time"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindAutoRecArm(callback func() error) {
	addr := "/autorecarm"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindSoloReset(callback func() error) {
	addr := "/soloreset"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindGotoMarker(param int64, callback func() error) {
	addr := "/marker/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindScrub(callback func(float64) error) {
	addr := "/scrub"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindLastRegionNumber(callback func(string) error) {
	addr := "/lastregion/number/str"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindMasterVu(callback func(float64) error) {
	addr := "/master/vu"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxParamName(path PathFxParamFxparamParamName, callback func(string) error) {
	addr := "/fx/@/fxparam/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxParamNameFxparamName(param int64, callback func(string) error) {
	addr := "/fxparam/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindReaperTrackFollowsDevice(callback func() error) {
	addr := "/reaper/track/follows/device"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindPause(callback func() error) {
	addr := "/pause"
	r.bindTrigger(addr, callback)
}

// writing a marker or region time may change its index -- you should use the *ID_ versions below if needed
func (r *Reaper) BindMarkerName(param int64, callback func(string) error) {
	addr := "/marker/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindMasterVolume(callback func(float64) error) {
	addr := "/master/volume"
	r.o.BindFloat(addr, callback)
}

// pitch can take channel as wildcard, or value only
func (r *Reaper) BindVkbMidiPitch(param int64, callback func(int64) error) {
	addr := "/vkb_midi/@/pitch"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindInt(addr, callback)
}

// pitch can take channel as wildcard, or value only
func (r *Reaper) BindVkbMidiPitchPitch(callback func(int64) error) {
	addr := "/vkb_midi/pitch"
	r.o.BindInt(addr, callback)
}

func (r *Reaper) BindZoomYMinus(callback func(float64) error) {
	addr := "/zoom/y"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindZoomYMinusMinus(callback func(bool) error) {
	addr := "/zoom/y/-"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindLastRegionLength(callback func(float64) error) {
	addr := "/lastregion/length"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxBypass(param int64, callback func(bool) error) {
	addr := "/fx/@/bypass"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindFxBypassBypass(callback func(bool) error) {
	addr := "/fx/bypass"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindFxBypassTrackFxBypass(path PathTrackParamFxParamBypass, callback func(bool) error) {
	addr := "/track/@/fx/@/bypass"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindFrames(callback func(string) error) {
	addr := "/frames/str"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindRegionLength(param int64, callback func(float64) error) {
	addr := "/region/@/length"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindMasterPan(callback func(float64) error) {
	addr := "/master/pan"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxInstOpenUi(callback func(bool) error) {
	addr := "/fxinst/openui"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindFxInstOpenUiTrackFxinstOpenui(param int64, callback func(bool) error) {
	addr := "/track/@/fxinst/openui"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindLastTouchedFxParamValue(callback func(float64) error) {
	addr := "/fxparam/last_touched/value"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindMetronome(callback func() error) {
	addr := "/click"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindLastRegionName(callback func(string) error) {
	addr := "/lastregion/name"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxInstPreset(callback func(string) error) {
	addr := "/fxinst/preset"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxInstPresetTrackFxinstPreset(param int64, callback func(string) error) {
	addr := "/track/@/fxinst/preset"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindSamples(callback func(float64) error) {
	addr := "/samples"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindMarkerTime(param int64, callback func(float64) error) {
	addr := "/marker/@/time"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindRegionidNumber(param int64, callback func(int64) error) {
	addr := "/region_id/@/number"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindInt(addr, callback)
}

func (r *Reaper) BindFxNumber(param int64, callback func(string) error) {
	addr := "/fx/@/number/str"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindActionRelative(param int64, callback func(float64) error) {
	addr := "/action/@/cc/relative"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindRegionidTime(param int64, callback func(float64) error) {
	addr := "/region_id/@/time"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindMasterVuL(callback func(float64) error) {
	addr := "/master/vu/L"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxNextPreset(param int64, callback func() error) {
	addr := "/fx/@/preset+"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindFxNextPresetPresetPlus(callback func() error) {
	addr := "/fx/preset+"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindFxNextPresetTrackFxPresetPlus(path PathTrackParamFxParamPresetPlus, callback func() error) {
	addr := "/track/@/fx/@/preset+"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindZoomYPlus(callback func(float64) error) {
	addr := "/zoom/y"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindZoomYPlusPlus(callback func(bool) error) {
	addr := "/zoom/y/+"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindGotoRegion(param int64, callback func() error) {
	addr := "/region/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindRegionNumber(param int64, callback func(string) error) {
	addr := "/region/@/number/str"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindMarkeridNumber(param int64, callback func(int64) error) {
	addr := "/marker_id/@/number"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindInt(addr, callback)
}

func (r *Reaper) BindStop(callback func() error) {
	addr := "/stop"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindLastTouchedFxParamName(callback func(string) error) {
	addr := "/fxparam/last_touched/name"
	r.o.BindString(addr, callback)
}

// channel pressure (aftertouch) (0xD0) can take channel as wildcard, or value only
func (r *Reaper) BindVkbMidiChannelpressure(param int64, callback func(int64) error) {
	addr := "/vkb_midi/@/channelpressure"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindInt(addr, callback)
}

// channel pressure (aftertouch) (0xD0) can take channel as wildcard, or value only
func (r *Reaper) BindVkbMidiChannelpressureChannelpressure(callback func(int64) error) {
	addr := "/vkb_midi/channelpressure"
	r.o.BindInt(addr, callback)
}

func (r *Reaper) BindScrollXPlus(callback func(float64) error) {
	addr := "/scroll/x"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindScrollXPlusPlus(callback func(bool) error) {
	addr := "/scroll/x/+"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindScrollYPlus(callback func(float64) error) {
	addr := "/scroll/y"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindScrollYPlusPlus(callback func(bool) error) {
	addr := "/scroll/y/+"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindRecord(callback func() error) {
	addr := "/record"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindMarkerNumber(param int64, callback func(string) error) {
	addr := "/marker/@/number/str"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindLastRegionTime(callback func(float64) error) {
	addr := "/lastregion/time"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindMarkeridTime(param int64, callback func(float64) error) {
	addr := "/marker_id/@/time"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

// these are write-only, ID is the "NUMBER" field from above -- if not found, creates the marker/region
func (r *Reaper) BindMarkeridName(param int64, callback func(string) error) {
	addr := "/marker_id/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindLoopEndTime(callback func(float64) error) {
	addr := "/loop/end/time"
	r.o.BindFloat(addr, callback)
}

// program change (0xC0) can take channel as wildcard, or value only
func (r *Reaper) BindVkbMidiProgram(param int64, callback func(int64) error) {
	addr := "/vkb_midi/@/program"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindInt(addr, callback)
}

// program change (0xC0) can take channel as wildcard, or value only
func (r *Reaper) BindVkbMidiProgramProgram(callback func(int64) error) {
	addr := "/vkb_midi/program"
	r.o.BindInt(addr, callback)
}

func (r *Reaper) BindAction(param int64, callback func() error) {
	addr := "/action/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindActionCc(param int64, callback func(float64) error) {
	addr := "/action/@/cc"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindReaperTrackFollowsReaper(callback func() error) {
	addr := "/reaper/track/follows/reaper"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindAnySolo(callback func(bool) error) {
	addr := "/anysolo"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindFxInstParamValue(param int64, callback func(float64) error) {
	addr := "/fxinstparam/@/value"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxInstParamValueTrackFxinstparamValue(path PathTrackParamFxinstparamParamValue, callback func(float64) error) {
	addr := "/track/@/fxinstparam/@/value"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindFloat(addr, callback)
}

// OSC pattern config file.
// Make a copy of this file, rename it, and edit the file to create a
// custom pattern configuration.
// For basic information about OSC and REAPER, see
// http://www.cockos.com/reaper/sdk/osc/osc.php .
// ----------------------------------------------------------------
// Default settings for how this device displays information.
// (these can all be overridden by the device sending OSC messages, search for these
// names below to see the messages)
//
// DEVICE_TRACK_COUNT is how many tracks this device can display at once
// (the track bank size).
// DEVICE_SEND_COUNT/DEVICE_RECEIVE_COUNT is how many sends and receives this
// device can display at once.
// DEVICE_FX_COUNT is how many track insert FX this device can display at once.
// DEVICE_FX_PARAM_COUNT is how many FX parameters this device can display at once
// (the FX parameter bank size).
// DEVICE_FX_INST_PARAM_COUNT is how many FX instrument parameters this device can
// display at once (the FX instrument parameter bank size).
// DEVICE_MARKER_COUNT is how many markers for which this device would like to
// receive information
// DEVICE_REGION_COUNT is how many regions for which this device would like to
// receive information
// ----------------------------------------------------------------
// Default values for how this device behaves. The device has a selected track, bank
// of tracks, and FX, which are not necessarily the same as the selected track or FX
// in the REAPER window.
// REAPER_TRACK_FOLLOWS determines whether the selected track in REAPER changes
// only when the user changes it in the REAPER window, or if it follows the track
// currently selected in the OSC device.
// Allowed values: REAPER, DEVICE
// DEVICE_TRACK_FOLLOWS determines whether the selected track in the device changes
// only when the device changes it, or if it follows the last touched track in the
// REAPER window.
// Allowed values: DEVICE, LAST_TOUCHED
// DEVICE_TRACK_BANK_FOLLOWS determines whether the selected track bank in the device
// changes only when the device changes it, or if it follows the REAPER mixer view.
// Allowed values: DEVICE, MIXER
// DEVICE_FX_FOLLOWS determines whether the selected FX in the device changes only
// when the  device changes it, or if it follows the last touched or currently focused
// FX in the REAPER window.
// Allowed values: DEVICE, LAST_TOUCHED, FOCUSED
// DEVICE_EQ determines whether sending any FX_EQ message will automatically insert
// ReaEQ on the target track if it does not exist, or the message will only affect
// an existing instance of ReaEQ.
// Allowed values: INSERT, EXISTING
// DEVICE_ROTARY_CENTER defines the argument that represents no change, for rotary
// controls.
// Allowed values: 0, 0.5
// ----------------------------------------------------------------
// Each line below is an action description in all caps, followed by a number of OSC
// message patterns. You can add, remove, or change patterns, delete lines, or comment
// out lines by adding '#', but do not change the action descriptions.
// The patterns following the action are the messages that REAPER will send and receive
// to and from the OSC device. An action can have no patterns (and will be ignored),
// one pattern, or many patterns.
// The patterns may contain the wildcard character '@'. (This is REAPER-only, not part
// of the OSC specification.) The '@' wildcard is used to specify the action target.
// ----------------------------------------------------------------
// The OSC device sends patterns to trigger actions, and REAPER sends patterns to the
// device as feedback.  OSC patterns can include arguments, which are be interpreted
// in various ways, defined by a flag immediately before the pattern.
// n: normalized floating-point argument. 0 means the minimum value, and 1 means the
// maximum value.  This can be used for continous controls like sliders and knobs.
// Example: TRACK_VOLUME n/track/volume n/track/@/volume
// The device sends /track/3/volume 0.5 to set the volume to 0.5 for track 3, or
// /track/volume 0.5 to set the volume for the track that is currently selected in
// the device. REAPER sends /track/3/volume 0.5 when track 3 volume changes to 0.5.
// If track 3 is currently selected in the device, REAPER will also send
// /track/volume 0.5. The floating-point argument represents as the track fader
// position in the REAPER window. 0 sets the fader all the way down, 1 sets the fader
// all the way up, 0.5 sets the fader exactly in the middle. Therefore, the actual
// volume that is set depends on the REAPER track fader preference settings.
// f: raw floating-point argument. The argument is interpreted directly, to set or
// report a value.
// Example: TEMPO f/tempo/raw
// The device sends /tempo/raw 100.351 to change the REAPER tempo to 100.351 bpm.
// REAPER sends /tempo/raw 120 when the tempo changes to 120 bpm.
// Normalized and raw floating-point arguments also support multiple parameters
// sent from the device.
// Example: FX_PARAM_VALUE n/track/@/fx/@/fxparam/@/value
// The device can send /track/3/fx/1,2,5/fxparam/6,7,7/value 0.25 0.5 0.75
// to set three FX parameter values at once, to 0.25, 0.5, 0.75 respectively.
// b: binary argument, either 0 or 1. The device sets or clears the state when
// sending the message. Can be used to emulate switches or momentary controls.
// Example: TRACK_MUTE b/track/mute b/track/@/mute
// The device sends /track/3/mute 1 to mute track 3, or /track/mute 1 to mute the
// track that is currently selected in the device. /track/3/mute 0 will unmute
// track 3. REAPER sends /track/3/mute 1 when track 3 is muted, and /track/3/mute 0
// when track 3 is unmuted. If track 3 is currently selected in the device, REAPER
// will also send /track/mute 1 and /track/mute 0.
// Example: REWIND b/rewind
// The device sends /rewind 1 to begin rewinding, and sends /rewind 0 to stop
// rewinding. REAPER sends /rewind 1 when the rewind button in the REAPER window is
// pressed, and /rewind 0 when the button is released.
// t: trigger or toggle message. The device triggers the action, or toggles the
// state, when the pattern is sent with no arguments, or with an argument of 1.
// The feedback values REAPER sends are identical to those sent for binary
// arguments.
// Example: METRONOME t/click
// The device sends /click or /click 1 to toggle the metronome on or off. REAPER
// sends /click 1 when the metronome is enabled, and /click 0 when the metronome
// is disabled.
// r: rotary. The device triggers the action in the forward direction when sent
// with an argument greater than ROTARY_CENTER, and in the reverse direction when
// sent with an argument less than ROTARY_CENTER. For some messages, the magnitude
// of the argument affects the rate of change. REAPER does not send feedback for
// these messages.
// Example: SCRUB r/scrub
// The device sends /scrub 1 to scrub forward, and /scrub -1 to scrub in reverse
// (if ROTARY_CENTER is 0).
// s: string. These messages include a string argument. Many of these messages
// are sent from REAPER to the device for feedback/display, but some can be sent
// from the device to REAPER.
// Example: TRACK_NAME s/track/name s/track/@/name
// The device sends /track/3/name "vox" to rename track 3 in REAPER, or /track/name
// "vox" to rename the track that is currently selected in the device. REAPER sends
// /track/3/name "vox" to report that name of track 3 is "vox". If track 3 is
// currently selected in the device, REAPER will also send /track/name "vox".
// Example: DEVICE_FX_FOLLOWS s/fxfollows
// The device sends /fxfollows "FOCUSED" to inform REAPER that the selected FX in the
// device will now follow the FX that is focused in the REAPER window.
// i: integer. These messages include an integer argument, and are sent from the
// device to REAPER.
// Example: ACTION i/action t/action/@
// The device sends /action 40757 or /action/40757 to trigger the REAPER action
// "split items at edit cursor". See the REAPER actions window for a complete list
// of action command ID numbers.
// Example: DEVICE_TRACK_BANK_SELECT i/bankedit t/bankedit/@
// The device sends /bankedit 2 or /bankedit/2 to inform REAPER that the active
// track bank is bank 2. If NUM_TRACKS is 8, that means REAPER will now interpret
// a message like /track/1/volume as targeting the volume for track 9, and  REAPER
// will only send the device feedback messages for tracks 9-16.
// ----------------------------------------------------------------
// Note: the default configuration includes a lot of feedback messages, which can
// flood the device. Avoid flooding by removing messages (by deleting the patterns,
// or commenting out the lines) that the device does not want, especially the
// TIME, BEAT, SAMPLES, FRAMES, VU, FX_PARAM, LAST_MARKER, LAST_REGION messages.
// Note: FX parameter feedback will only be sent for the track that is currently
// selected in the device. If messages exist that can target FX on other tracks,
// feedback will be sent whenever the parameter values change. This can be a lot of
// data, so only include those messages if you want the feedback.
// Example: FX_PARAM_VALUE /fxparam/@/value /fx/@/fxparam/@/value
// This action can only target FX on the currently selected track, so feedback will
// only be sent for that track.
// Example: FX_PARAM_VALUE /fxparam/@/value /fx/@/fxparam/@/value /track/@/fx/@/fxparam/@/value
// This action can target FX on any track, so feedback will be sent for all tracks.
// Note: multiple patterns for a given action can all be listed on the same line,
// or split onto separate lines.
// ----------------------------------------------------------------
// The default REAPER OSC pattern configuration follows. To create a custom
// configuration, copy this file and edit the copy.
func (r *Reaper) BindScrollXMinus(callback func(float64) error) {
	addr := "/scroll/x"
	r.o.BindFloat(addr, callback)
}

// OSC pattern config file.
// Make a copy of this file, rename it, and edit the file to create a
// custom pattern configuration.
// For basic information about OSC and REAPER, see
// http://www.cockos.com/reaper/sdk/osc/osc.php .
// ----------------------------------------------------------------
// Default settings for how this device displays information.
// (these can all be overridden by the device sending OSC messages, search for these
// names below to see the messages)
//
// DEVICE_TRACK_COUNT is how many tracks this device can display at once
// (the track bank size).
// DEVICE_SEND_COUNT/DEVICE_RECEIVE_COUNT is how many sends and receives this
// device can display at once.
// DEVICE_FX_COUNT is how many track insert FX this device can display at once.
// DEVICE_FX_PARAM_COUNT is how many FX parameters this device can display at once
// (the FX parameter bank size).
// DEVICE_FX_INST_PARAM_COUNT is how many FX instrument parameters this device can
// display at once (the FX instrument parameter bank size).
// DEVICE_MARKER_COUNT is how many markers for which this device would like to
// receive information
// DEVICE_REGION_COUNT is how many regions for which this device would like to
// receive information
// ----------------------------------------------------------------
// Default values for how this device behaves. The device has a selected track, bank
// of tracks, and FX, which are not necessarily the same as the selected track or FX
// in the REAPER window.
// REAPER_TRACK_FOLLOWS determines whether the selected track in REAPER changes
// only when the user changes it in the REAPER window, or if it follows the track
// currently selected in the OSC device.
// Allowed values: REAPER, DEVICE
// DEVICE_TRACK_FOLLOWS determines whether the selected track in the device changes
// only when the device changes it, or if it follows the last touched track in the
// REAPER window.
// Allowed values: DEVICE, LAST_TOUCHED
// DEVICE_TRACK_BANK_FOLLOWS determines whether the selected track bank in the device
// changes only when the device changes it, or if it follows the REAPER mixer view.
// Allowed values: DEVICE, MIXER
// DEVICE_FX_FOLLOWS determines whether the selected FX in the device changes only
// when the  device changes it, or if it follows the last touched or currently focused
// FX in the REAPER window.
// Allowed values: DEVICE, LAST_TOUCHED, FOCUSED
// DEVICE_EQ determines whether sending any FX_EQ message will automatically insert
// ReaEQ on the target track if it does not exist, or the message will only affect
// an existing instance of ReaEQ.
// Allowed values: INSERT, EXISTING
// DEVICE_ROTARY_CENTER defines the argument that represents no change, for rotary
// controls.
// Allowed values: 0, 0.5
// ----------------------------------------------------------------
// Each line below is an action description in all caps, followed by a number of OSC
// message patterns. You can add, remove, or change patterns, delete lines, or comment
// out lines by adding '#', but do not change the action descriptions.
// The patterns following the action are the messages that REAPER will send and receive
// to and from the OSC device. An action can have no patterns (and will be ignored),
// one pattern, or many patterns.
// The patterns may contain the wildcard character '@'. (This is REAPER-only, not part
// of the OSC specification.) The '@' wildcard is used to specify the action target.
// ----------------------------------------------------------------
// The OSC device sends patterns to trigger actions, and REAPER sends patterns to the
// device as feedback.  OSC patterns can include arguments, which are be interpreted
// in various ways, defined by a flag immediately before the pattern.
// n: normalized floating-point argument. 0 means the minimum value, and 1 means the
// maximum value.  This can be used for continous controls like sliders and knobs.
// Example: TRACK_VOLUME n/track/volume n/track/@/volume
// The device sends /track/3/volume 0.5 to set the volume to 0.5 for track 3, or
// /track/volume 0.5 to set the volume for the track that is currently selected in
// the device. REAPER sends /track/3/volume 0.5 when track 3 volume changes to 0.5.
// If track 3 is currently selected in the device, REAPER will also send
// /track/volume 0.5. The floating-point argument represents as the track fader
// position in the REAPER window. 0 sets the fader all the way down, 1 sets the fader
// all the way up, 0.5 sets the fader exactly in the middle. Therefore, the actual
// volume that is set depends on the REAPER track fader preference settings.
// f: raw floating-point argument. The argument is interpreted directly, to set or
// report a value.
// Example: TEMPO f/tempo/raw
// The device sends /tempo/raw 100.351 to change the REAPER tempo to 100.351 bpm.
// REAPER sends /tempo/raw 120 when the tempo changes to 120 bpm.
// Normalized and raw floating-point arguments also support multiple parameters
// sent from the device.
// Example: FX_PARAM_VALUE n/track/@/fx/@/fxparam/@/value
// The device can send /track/3/fx/1,2,5/fxparam/6,7,7/value 0.25 0.5 0.75
// to set three FX parameter values at once, to 0.25, 0.5, 0.75 respectively.
// b: binary argument, either 0 or 1. The device sets or clears the state when
// sending the message. Can be used to emulate switches or momentary controls.
// Example: TRACK_MUTE b/track/mute b/track/@/mute
// The device sends /track/3/mute 1 to mute track 3, or /track/mute 1 to mute the
// track that is currently selected in the device. /track/3/mute 0 will unmute
// track 3. REAPER sends /track/3/mute 1 when track 3 is muted, and /track/3/mute 0
// when track 3 is unmuted. If track 3 is currently selected in the device, REAPER
// will also send /track/mute 1 and /track/mute 0.
// Example: REWIND b/rewind
// The device sends /rewind 1 to begin rewinding, and sends /rewind 0 to stop
// rewinding. REAPER sends /rewind 1 when the rewind button in the REAPER window is
// pressed, and /rewind 0 when the button is released.
// t: trigger or toggle message. The device triggers the action, or toggles the
// state, when the pattern is sent with no arguments, or with an argument of 1.
// The feedback values REAPER sends are identical to those sent for binary
// arguments.
// Example: METRONOME t/click
// The device sends /click or /click 1 to toggle the metronome on or off. REAPER
// sends /click 1 when the metronome is enabled, and /click 0 when the metronome
// is disabled.
// r: rotary. The device triggers the action in the forward direction when sent
// with an argument greater than ROTARY_CENTER, and in the reverse direction when
// sent with an argument less than ROTARY_CENTER. For some messages, the magnitude
// of the argument affects the rate of change. REAPER does not send feedback for
// these messages.
// Example: SCRUB r/scrub
// The device sends /scrub 1 to scrub forward, and /scrub -1 to scrub in reverse
// (if ROTARY_CENTER is 0).
// s: string. These messages include a string argument. Many of these messages
// are sent from REAPER to the device for feedback/display, but some can be sent
// from the device to REAPER.
// Example: TRACK_NAME s/track/name s/track/@/name
// The device sends /track/3/name "vox" to rename track 3 in REAPER, or /track/name
// "vox" to rename the track that is currently selected in the device. REAPER sends
// /track/3/name "vox" to report that name of track 3 is "vox". If track 3 is
// currently selected in the device, REAPER will also send /track/name "vox".
// Example: DEVICE_FX_FOLLOWS s/fxfollows
// The device sends /fxfollows "FOCUSED" to inform REAPER that the selected FX in the
// device will now follow the FX that is focused in the REAPER window.
// i: integer. These messages include an integer argument, and are sent from the
// device to REAPER.
// Example: ACTION i/action t/action/@
// The device sends /action 40757 or /action/40757 to trigger the REAPER action
// "split items at edit cursor". See the REAPER actions window for a complete list
// of action command ID numbers.
// Example: DEVICE_TRACK_BANK_SELECT i/bankedit t/bankedit/@
// The device sends /bankedit 2 or /bankedit/2 to inform REAPER that the active
// track bank is bank 2. If NUM_TRACKS is 8, that means REAPER will now interpret
// a message like /track/1/volume as targeting the volume for track 9, and  REAPER
// will only send the device feedback messages for tracks 9-16.
// ----------------------------------------------------------------
// Note: the default configuration includes a lot of feedback messages, which can
// flood the device. Avoid flooding by removing messages (by deleting the patterns,
// or commenting out the lines) that the device does not want, especially the
// TIME, BEAT, SAMPLES, FRAMES, VU, FX_PARAM, LAST_MARKER, LAST_REGION messages.
// Note: FX parameter feedback will only be sent for the track that is currently
// selected in the device. If messages exist that can target FX on other tracks,
// feedback will be sent whenever the parameter values change. This can be a lot of
// data, so only include those messages if you want the feedback.
// Example: FX_PARAM_VALUE /fxparam/@/value /fx/@/fxparam/@/value
// This action can only target FX on the currently selected track, so feedback will
// only be sent for that track.
// Example: FX_PARAM_VALUE /fxparam/@/value /fx/@/fxparam/@/value /track/@/fx/@/fxparam/@/value
// This action can target FX on any track, so feedback will be sent for all tracks.
// Note: multiple patterns for a given action can all be listed on the same line,
// or split onto separate lines.
// ----------------------------------------------------------------
// The default REAPER OSC pattern configuration follows. To create a custom
// configuration, copy this file and edit the copy.
func (r *Reaper) BindScrollXMinusMinus(callback func(bool) error) {
	addr := "/scroll/x/-"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindZoomXPlus(callback func(float64) error) {
	addr := "/zoom/x"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindZoomXPlusPlus(callback func(bool) error) {
	addr := "/zoom/x/+"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindPlay(callback func() error) {
	addr := "/play"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindLastTouchedFxTrackName(callback func(string) error) {
	addr := "/fx/last_touched/track/name"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindMidiaction(param int64, callback func() error) {
	addr := "/midiaction/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindRegionidLength(param int64, callback func(float64) error) {
	addr := "/region_id/@/length"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindMasterSendName(param int64, callback func(string) error) {
	addr := "/master/send/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxWetdry(param int64, callback func(float64) error) {
	addr := "/fx/@/wetdry"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxWetdryWetdry(callback func(float64) error) {
	addr := "/fx/wetdry"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxWetdryTrackFxWetdry(path PathTrackParamFxParamWetdry, callback func(float64) error) {
	addr := "/track/@/fx/@/wetdry"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxInstNextPreset(callback func() error) {
	addr := "/fxinst/preset+"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindFxInstNextPresetTrackFxinstPresetPlus(param int64, callback func() error) {
	addr := "/track/@/fxinst/preset+"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindTempo(callback func(float64) error) {
	addr := "/tempo"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindTempoRaw(callback func(float64) error) {
	addr := "/tempo/raw"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindTempoRotary(callback func(float64) error) {
	addr := "/tempo/rotary"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindRegionTime(param int64, callback func(float64) error) {
	addr := "/region/@/time"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindLastMarkerName(callback func(string) error) {
	addr := "/lastmarker/name"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxOpenUi(param int64, callback func(bool) error) {
	addr := "/fx/@/openui"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindFxOpenUiOpenui(callback func(bool) error) {
	addr := "/fx/openui"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindFxOpenUiTrackFxOpenui(path PathTrackParamFxParamOpenui, callback func(bool) error) {
	addr := "/track/@/fx/@/openui"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindBool(addr, callback)
}

// for CCs, if two, first wildcard is channel (0-15). MIDI CC number is required (as decimal integer only!)
func (r *Reaper) BindVkbMidiCc(path PathVkb_midiParamCcParam, callback func(int64) error) {
	addr := "/vkb_midi/@/cc/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindInt(addr, callback)
}

// for CCs, if two, first wildcard is channel (0-15). MIDI CC number is required (as decimal integer only!)
func (r *Reaper) BindVkbMidiCcCc(param int64, callback func(int64) error) {
	addr := "/vkb_midi/cc/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindInt(addr, callback)
}

func (r *Reaper) BindActionSoft(param int64, callback func(float64) error) {
	addr := "/action/@/cc/soft"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindFxName(param int64, callback func(string) error) {
	addr := "/fx/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxNameName(callback func(string) error) {
	addr := "/fx/name"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxNameTrackFxName(path PathTrackParamFxParamName, callback func(string) error) {
	addr := "/track/@/fx/@/name"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindFxPrevPreset(param int64, callback func() error) {
	addr := "/fx/@/preset-"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindFxPrevPresetPresetMinus(callback func() error) {
	addr := "/fx/preset-"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindFxPrevPresetTrackFxPresetMinus(path PathTrackParamFxParamPresetMinus, callback func() error) {
	addr := "/track/@/fx/@/preset-"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindRewind(callback func(bool) error) {
	addr := "/rewind"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindRewindForwardSetloop(callback func() error) {
	addr := "/editloop"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindMasterSendPan(param int64, callback func(float64) error) {
	addr := "/master/send/@/pan"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindMidilistaction(param int64, callback func() error) {
	addr := "/midilistaction/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindReaperTrackFollows(callback func(string) error) {
	addr := "/reaper/track/follows"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindScrollYMinus(callback func(float64) error) {
	addr := "/scroll/y"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindScrollYMinusMinus(callback func(bool) error) {
	addr := "/scroll/y/-"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindForward(callback func(bool) error) {
	addr := "/forward"
	r.o.BindBool(addr, callback)
}

func (r *Reaper) BindFxInstPrevPreset(callback func() error) {
	addr := "/fxinst/preset-"
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindFxInstPrevPresetTrackFxinstPresetMinus(param int64, callback func() error) {
	addr := "/track/@/fxinst/preset-"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.bindTrigger(addr, callback)
}

func (r *Reaper) BindLastTouchedFxName(callback func(string) error) {
	addr := "/fx/last_touched/name"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindPlayRate(callback func(float64) error) {
	addr := "/playrate"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindPlayRateRaw(callback func(float64) error) {
	addr := "/playrate/raw"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindPlayRateRotary(callback func(float64) error) {
	addr := "/playrate/rotary"
	r.o.BindFloat(addr, callback)
}

func (r *Reaper) BindLastMarkerNumber(callback func(string) error) {
	addr := "/lastmarker/number/str"
	r.o.BindString(addr, callback)
}

// these send MIDI to the vkb MIDI input. parameters are raw MIDI.
// for notes, if two, first wildcard is channel (0-15). MIDI note number is required (as decimal integer only!)
// if parameter value is 0, note-off, otherwise note-on
func (r *Reaper) BindVkbMidiNote(path PathVkb_midiParamNoteParam, callback func(int64) error) {
	addr := "/vkb_midi/@/note/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param1, 10), 1)
	addr = strings.Replace(addr, "@", strconv.FormatInt(path.Param2, 10), 1)
	r.o.BindInt(addr, callback)
}

// these send MIDI to the vkb MIDI input. parameters are raw MIDI.
// for notes, if two, first wildcard is channel (0-15). MIDI note number is required (as decimal integer only!)
// if parameter value is 0, note-off, otherwise note-on
func (r *Reaper) BindVkbMidiNoteNote(param int64, callback func(int64) error) {
	addr := "/vkb_midi/note/@"
	addr = strings.Replace(addr, "@", strconv.FormatInt(param, 10), 1)
	r.o.BindInt(addr, callback)
}

func (r *Reaper) BindBeat(callback func(string) error) {
	addr := "/beat/str"
	r.o.BindString(addr, callback)
}

func (r *Reaper) BindMasterVuR(callback func(float64) error) {
	addr := "/master/vu/R"
	r.o.BindFloat(addr, callback)
}
